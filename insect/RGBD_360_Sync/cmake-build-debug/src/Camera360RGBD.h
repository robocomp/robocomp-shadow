//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Camera360RGBD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Camera360RGBD_h__
#define __Camera360RGBD_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompCamera360RGBD
{

class Camera360RGBD;
class Camera360RGBDPrx;

}

namespace RoboCompCamera360RGBD
{

using ImgType = ::std::vector<::Ice::Byte>;

struct TRoi
{
    int xcenter;
    int ycenter;
    int xsize;
    int ysize;
    int finalxsize;
    int finalysize;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(xcenter, ycenter, xsize, ysize, finalxsize, finalysize);
    }
};

struct TRGBD
{
    bool rgbcompressed;
    bool depthcompressed;
    int cameraID;
    int width;
    int height;
    int rgbchannels;
    int depthchannels;
    int focalx;
    int focaly;
    long long int alivetime;
    float period;
    ::RoboCompCamera360RGBD::ImgType rgb;
    ::RoboCompCamera360RGBD::ImgType depth;
    ::RoboCompCamera360RGBD::TRoi roi;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const bool&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const long long int&, const float&, const ::RoboCompCamera360RGBD::ImgType&, const ::RoboCompCamera360RGBD::ImgType&, const ::RoboCompCamera360RGBD::TRoi&> ice_tuple() const
    {
        return std::tie(rgbcompressed, depthcompressed, cameraID, width, height, rgbchannels, depthchannels, focalx, focaly, alivetime, period, rgb, depth, roi);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompCamera360RGBD
{

class Camera360RGBD : public virtual ::Ice::Object
{
public:

    using ProxyType = Camera360RGBDPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TRGBD getROI(int cx, int cy, int sx, int sy, int roiwidth, int roiheight, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getROI(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompCamera360RGBD
{

class Camera360RGBDPrx : public virtual ::Ice::Proxy<Camera360RGBDPrx, ::Ice::ObjectPrx>
{
public:

    TRGBD getROI(int cx, int cy, int sx, int sy, int roiwidth, int roiheight, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCamera360RGBD::TRGBD>(true, this, &Camera360RGBDPrx::_iceI_getROI, cx, cy, sx, sy, roiwidth, roiheight, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getROIAsync(int cx, int cy, int sx, int sy, int roiwidth, int roiheight, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera360RGBD::TRGBD>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera360RGBD::TRGBD, P>(false, this, &Camera360RGBDPrx::_iceI_getROI, cx, cy, sx, sy, roiwidth, roiheight, context);
    }

    ::std::function<void()>
    getROIAsync(int cx, int cy, int sx, int sy, int roiwidth, int roiheight,
                ::std::function<void(::RoboCompCamera360RGBD::TRGBD)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCamera360RGBD::TRGBD>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompCamera360RGBD::Camera360RGBDPrx::_iceI_getROI, cx, cy, sx, sy, roiwidth, roiheight, context);
    }

    /// \cond INTERNAL
    void _iceI_getROI(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera360RGBD::TRGBD>>&, int, int, int, int, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    Camera360RGBDPrx() = default;
    friend ::std::shared_ptr<Camera360RGBDPrx> IceInternal::createProxy<Camera360RGBDPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompCamera360RGBD::TRoi>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompCamera360RGBD::TRoi, S>
{
    static void read(S* istr, ::RoboCompCamera360RGBD::TRoi& v)
    {
        istr->readAll(v.xcenter, v.ycenter, v.xsize, v.ysize, v.finalxsize, v.finalysize);
    }
};

template<>
struct StreamableTraits<::RoboCompCamera360RGBD::TRGBD>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 68;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCamera360RGBD::TRGBD, S>
{
    static void read(S* istr, ::RoboCompCamera360RGBD::TRGBD& v)
    {
        istr->readAll(v.rgbcompressed, v.depthcompressed, v.cameraID, v.width, v.height, v.rgbchannels, v.depthchannels, v.focalx, v.focaly, v.alivetime, v.period, v.rgb, v.depth, v.roi);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompCamera360RGBD
{

using Camera360RGBDPtr = ::std::shared_ptr<Camera360RGBD>;
using Camera360RGBDPrxPtr = ::std::shared_ptr<Camera360RGBDPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompCamera360RGBD
{

class Camera360RGBD;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Camera360RGBD>&);
::IceProxy::Ice::Object* upCast(Camera360RGBD*);
/// \endcond

}

}

namespace RoboCompCamera360RGBD
{

class Camera360RGBD;
/// \cond INTERNAL
::Ice::Object* upCast(Camera360RGBD*);
/// \endcond
typedef ::IceInternal::Handle< Camera360RGBD> Camera360RGBDPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCamera360RGBD::Camera360RGBD> Camera360RGBDPrx;
typedef Camera360RGBDPrx Camera360RGBDPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Camera360RGBDPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompCamera360RGBD
{

typedef ::std::vector< ::Ice::Byte> ImgType;

struct TRoi
{
    ::Ice::Int xcenter;
    ::Ice::Int ycenter;
    ::Ice::Int xsize;
    ::Ice::Int ysize;
    ::Ice::Int finalxsize;
    ::Ice::Int finalysize;

    bool operator==(const TRoi& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(xcenter != rhs_.xcenter)
        {
            return false;
        }
        if(ycenter != rhs_.ycenter)
        {
            return false;
        }
        if(xsize != rhs_.xsize)
        {
            return false;
        }
        if(ysize != rhs_.ysize)
        {
            return false;
        }
        if(finalxsize != rhs_.finalxsize)
        {
            return false;
        }
        if(finalysize != rhs_.finalysize)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TRoi& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(xcenter < rhs_.xcenter)
        {
            return true;
        }
        else if(rhs_.xcenter < xcenter)
        {
            return false;
        }
        if(ycenter < rhs_.ycenter)
        {
            return true;
        }
        else if(rhs_.ycenter < ycenter)
        {
            return false;
        }
        if(xsize < rhs_.xsize)
        {
            return true;
        }
        else if(rhs_.xsize < xsize)
        {
            return false;
        }
        if(ysize < rhs_.ysize)
        {
            return true;
        }
        else if(rhs_.ysize < ysize)
        {
            return false;
        }
        if(finalxsize < rhs_.finalxsize)
        {
            return true;
        }
        else if(rhs_.finalxsize < finalxsize)
        {
            return false;
        }
        if(finalysize < rhs_.finalysize)
        {
            return true;
        }
        else if(rhs_.finalysize < finalysize)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TRoi& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TRoi& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TRoi& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TRoi& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct TRGBD
{
    bool rgbcompressed;
    bool depthcompressed;
    ::Ice::Int cameraID;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int rgbchannels;
    ::Ice::Int depthchannels;
    ::Ice::Int focalx;
    ::Ice::Int focaly;
    ::Ice::Long alivetime;
    ::Ice::Float period;
    ::RoboCompCamera360RGBD::ImgType rgb;
    ::RoboCompCamera360RGBD::ImgType depth;
    ::RoboCompCamera360RGBD::TRoi roi;
};

}

namespace RoboCompCamera360RGBD
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCamera360RGBD::Camera360RGBD::begin_getROI.
 * Create a wrapper instance by calling ::RoboCompCamera360RGBD::newCallback_Camera360RGBD_getROI.
 */
class Callback_Camera360RGBD_getROI_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera360RGBD_getROI_Base> Callback_Camera360RGBD_getROIPtr;

}

namespace IceProxy
{

namespace RoboCompCamera360RGBD
{

class Camera360RGBD : public virtual ::Ice::Proxy<Camera360RGBD, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompCamera360RGBD::TRGBD getROI(::Ice::Int cx, ::Ice::Int cy, ::Ice::Int sx, ::Ice::Int sy, ::Ice::Int roiwidth, ::Ice::Int roiheight, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getROI(_iceI_begin_getROI(cx, cy, sx, sy, roiwidth, roiheight, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getROI(::Ice::Int cx, ::Ice::Int cy, ::Ice::Int sx, ::Ice::Int sy, ::Ice::Int roiwidth, ::Ice::Int roiheight, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getROI(cx, cy, sx, sy, roiwidth, roiheight, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getROI(::Ice::Int cx, ::Ice::Int cy, ::Ice::Int sx, ::Ice::Int sy, ::Ice::Int roiwidth, ::Ice::Int roiheight, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getROI(cx, cy, sx, sy, roiwidth, roiheight, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getROI(::Ice::Int cx, ::Ice::Int cy, ::Ice::Int sx, ::Ice::Int sy, ::Ice::Int roiwidth, ::Ice::Int roiheight, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getROI(cx, cy, sx, sy, roiwidth, roiheight, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getROI(::Ice::Int cx, ::Ice::Int cy, ::Ice::Int sx, ::Ice::Int sy, ::Ice::Int roiwidth, ::Ice::Int roiheight, const ::RoboCompCamera360RGBD::Callback_Camera360RGBD_getROIPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getROI(cx, cy, sx, sy, roiwidth, roiheight, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getROI(::Ice::Int cx, ::Ice::Int cy, ::Ice::Int sx, ::Ice::Int sy, ::Ice::Int roiwidth, ::Ice::Int roiheight, const ::Ice::Context& context, const ::RoboCompCamera360RGBD::Callback_Camera360RGBD_getROIPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getROI(cx, cy, sx, sy, roiwidth, roiheight, context, cb, cookie);
    }

    ::RoboCompCamera360RGBD::TRGBD end_getROI(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getROI(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompCamera360RGBD
{

class Camera360RGBD : public virtual ::Ice::Object
{
public:

    typedef Camera360RGBDPrx ProxyType;
    typedef Camera360RGBDPtr PointerType;

    virtual ~Camera360RGBD();

#ifdef ICE_CPP11_COMPILER
    Camera360RGBD() = default;
    Camera360RGBD(const Camera360RGBD&) = default;
    Camera360RGBD& operator=(const Camera360RGBD&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TRGBD getROI(::Ice::Int cx, ::Ice::Int cy, ::Ice::Int sx, ::Ice::Int sy, ::Ice::Int roiwidth, ::Ice::Int roiheight, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getROI(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Camera360RGBD& lhs, const Camera360RGBD& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Camera360RGBD& lhs, const Camera360RGBD& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompCamera360RGBD::TRoi>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompCamera360RGBD::TRoi, S>
{
    static void write(S* ostr, const ::RoboCompCamera360RGBD::TRoi& v)
    {
        ostr->write(v.xcenter);
        ostr->write(v.ycenter);
        ostr->write(v.xsize);
        ostr->write(v.ysize);
        ostr->write(v.finalxsize);
        ostr->write(v.finalysize);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCamera360RGBD::TRoi, S>
{
    static void read(S* istr, ::RoboCompCamera360RGBD::TRoi& v)
    {
        istr->read(v.xcenter);
        istr->read(v.ycenter);
        istr->read(v.xsize);
        istr->read(v.ysize);
        istr->read(v.finalxsize);
        istr->read(v.finalysize);
    }
};

template<>
struct StreamableTraits< ::RoboCompCamera360RGBD::TRGBD>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 68;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCamera360RGBD::TRGBD, S>
{
    static void write(S* ostr, const ::RoboCompCamera360RGBD::TRGBD& v)
    {
        ostr->write(v.rgbcompressed);
        ostr->write(v.depthcompressed);
        ostr->write(v.cameraID);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.rgbchannels);
        ostr->write(v.depthchannels);
        ostr->write(v.focalx);
        ostr->write(v.focaly);
        ostr->write(v.alivetime);
        ostr->write(v.period);
        ostr->write(v.rgb);
        ostr->write(v.depth);
        ostr->write(v.roi);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCamera360RGBD::TRGBD, S>
{
    static void read(S* istr, ::RoboCompCamera360RGBD::TRGBD& v)
    {
        istr->read(v.rgbcompressed);
        istr->read(v.depthcompressed);
        istr->read(v.cameraID);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.rgbchannels);
        istr->read(v.depthchannels);
        istr->read(v.focalx);
        istr->read(v.focaly);
        istr->read(v.alivetime);
        istr->read(v.period);
        istr->read(v.rgb);
        istr->read(v.depth);
        istr->read(v.roi);
    }
};

}
/// \endcond

namespace RoboCompCamera360RGBD
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCamera360RGBD::Camera360RGBD::begin_getROI.
 * Create a wrapper instance by calling ::RoboCompCamera360RGBD::newCallback_Camera360RGBD_getROI.
 */
template<class T>
class CallbackNC_Camera360RGBD_getROI : public Callback_Camera360RGBD_getROI_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TRGBD&);

    CallbackNC_Camera360RGBD_getROI(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Camera360RGBDPrx proxy = Camera360RGBDPrx::uncheckedCast(result->getProxy());
        TRGBD ret;
        try
        {
            ret = proxy->end_getROI(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCamera360RGBD::Camera360RGBD::begin_getROI.
 */
template<class T> Callback_Camera360RGBD_getROIPtr
newCallback_Camera360RGBD_getROI(const IceUtil::Handle<T>& instance, void (T::*cb)(const TRGBD&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera360RGBD_getROI<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCamera360RGBD::Camera360RGBD::begin_getROI.
 */
template<class T> Callback_Camera360RGBD_getROIPtr
newCallback_Camera360RGBD_getROI(T* instance, void (T::*cb)(const TRGBD&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera360RGBD_getROI<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCamera360RGBD::Camera360RGBD::begin_getROI.
 * Create a wrapper instance by calling ::RoboCompCamera360RGBD::newCallback_Camera360RGBD_getROI.
 */
template<class T, typename CT>
class Callback_Camera360RGBD_getROI : public Callback_Camera360RGBD_getROI_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TRGBD&, const CT&);

    Callback_Camera360RGBD_getROI(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Camera360RGBDPrx proxy = Camera360RGBDPrx::uncheckedCast(result->getProxy());
        TRGBD ret;
        try
        {
            ret = proxy->end_getROI(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCamera360RGBD::Camera360RGBD::begin_getROI.
 */
template<class T, typename CT> Callback_Camera360RGBD_getROIPtr
newCallback_Camera360RGBD_getROI(const IceUtil::Handle<T>& instance, void (T::*cb)(const TRGBD&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera360RGBD_getROI<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCamera360RGBD::Camera360RGBD::begin_getROI.
 */
template<class T, typename CT> Callback_Camera360RGBD_getROIPtr
newCallback_Camera360RGBD_getROI(T* instance, void (T::*cb)(const TRGBD&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera360RGBD_getROI<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
