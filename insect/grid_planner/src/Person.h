//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Person.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Person_h__
#define __Person_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompPerson
{

class Person;
class PersonPrx;

}

namespace RoboCompPerson
{

struct KeyPoint
{
    float x;
    float y;
    float z;
    int i;
    int j;
    float xw;
    float yw;
    float zw;
    float score;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const int&, const int&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, i, j, xw, yw, zw, score);
    }
};

using TJoints = ::std::map<int, KeyPoint>;

struct TPerson
{
    int id;
    float orientation;
    ::RoboCompPerson::TJoints joints;
    long long int timestamp;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const float&, const ::RoboCompPerson::TJoints&, const long long int&> ice_tuple() const
    {
        return std::tie(id, orientation, joints, timestamp);
    }
};

using TJointNames = ::std::map<int, ::std::string>;

struct TConnection
{
    int first;
    int second;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(first, second);
    }
};

using TConnections = ::std::vector<TConnection>;

struct TJointData
{
    ::RoboCompPerson::TJointNames jointNames;
    ::RoboCompPerson::TConnections connections;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompPerson::TJointNames&, const ::RoboCompPerson::TConnections&> ice_tuple() const
    {
        return std::tie(jointNames, connections);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompPerson
{

class Person : public virtual ::Ice::Object
{
public:

    using ProxyType = PersonPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TJointData getJointData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getJointData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TPerson getPerson(int id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPerson(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPerson(TPerson person, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setPerson(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompPerson
{

class PersonPrx : public virtual ::Ice::Proxy<PersonPrx, ::Ice::ObjectPrx>
{
public:

    TJointData getJointData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompPerson::TJointData>(true, this, &PersonPrx::_iceI_getJointData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getJointDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompPerson::TJointData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompPerson::TJointData, P>(false, this, &PersonPrx::_iceI_getJointData, context);
    }

    ::std::function<void()>
    getJointDataAsync(::std::function<void(::RoboCompPerson::TJointData)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompPerson::TJointData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompPerson::PersonPrx::_iceI_getJointData, context);
    }

    /// \cond INTERNAL
    void _iceI_getJointData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompPerson::TJointData>>&, const ::Ice::Context&);
    /// \endcond

    TPerson getPerson(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompPerson::TPerson>(true, this, &PersonPrx::_iceI_getPerson, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPersonAsync(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompPerson::TPerson>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompPerson::TPerson, P>(false, this, &PersonPrx::_iceI_getPerson, id, context);
    }

    ::std::function<void()>
    getPersonAsync(int id,
                   ::std::function<void(::RoboCompPerson::TPerson)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompPerson::TPerson>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompPerson::PersonPrx::_iceI_getPerson, id, context);
    }

    /// \cond INTERNAL
    void _iceI_getPerson(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompPerson::TPerson>>&, int, const ::Ice::Context&);
    /// \endcond

    void setPerson(const TPerson& person, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &PersonPrx::_iceI_setPerson, person, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPersonAsync(const TPerson& person, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &PersonPrx::_iceI_setPerson, person, context);
    }

    ::std::function<void()>
    setPersonAsync(const TPerson& person,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompPerson::PersonPrx::_iceI_setPerson, person, context);
    }

    /// \cond INTERNAL
    void _iceI_setPerson(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TPerson&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    PersonPrx() = default;
    friend ::std::shared_ptr<PersonPrx> IceInternal::createProxy<PersonPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompPerson::KeyPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompPerson::KeyPoint, S>
{
    static void read(S* istr, ::RoboCompPerson::KeyPoint& v)
    {
        istr->readAll(v.x, v.y, v.z, v.i, v.j, v.xw, v.yw, v.zw, v.score);
    }
};

template<>
struct StreamableTraits<::RoboCompPerson::TPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompPerson::TPerson, S>
{
    static void read(S* istr, ::RoboCompPerson::TPerson& v)
    {
        istr->readAll(v.id, v.orientation, v.joints, v.timestamp);
    }
};

template<>
struct StreamableTraits<::RoboCompPerson::TConnection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompPerson::TConnection, S>
{
    static void read(S* istr, ::RoboCompPerson::TConnection& v)
    {
        istr->readAll(v.first, v.second);
    }
};

template<>
struct StreamableTraits<::RoboCompPerson::TJointData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompPerson::TJointData, S>
{
    static void read(S* istr, ::RoboCompPerson::TJointData& v)
    {
        istr->readAll(v.jointNames, v.connections);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompPerson
{

using PersonPtr = ::std::shared_ptr<Person>;
using PersonPrxPtr = ::std::shared_ptr<PersonPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompPerson
{

class Person;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Person>&);
::IceProxy::Ice::Object* upCast(Person*);
/// \endcond

}

}

namespace RoboCompPerson
{

class Person;
/// \cond INTERNAL
::Ice::Object* upCast(Person*);
/// \endcond
typedef ::IceInternal::Handle< Person> PersonPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPerson::Person> PersonPrx;
typedef PersonPrx PersonPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(PersonPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompPerson
{

struct KeyPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Int i;
    ::Ice::Int j;
    ::Ice::Float xw;
    ::Ice::Float yw;
    ::Ice::Float zw;
    ::Ice::Float score;
};

typedef ::std::map< ::Ice::Int, KeyPoint> TJoints;

struct TPerson
{
    ::Ice::Int id;
    ::Ice::Float orientation;
    ::RoboCompPerson::TJoints joints;
    ::Ice::Long timestamp;
};

typedef ::std::map< ::Ice::Int, ::std::string> TJointNames;

struct TConnection
{
    ::Ice::Int first;
    ::Ice::Int second;

    bool operator==(const TConnection& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(first != rhs_.first)
        {
            return false;
        }
        if(second != rhs_.second)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TConnection& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(first < rhs_.first)
        {
            return true;
        }
        else if(rhs_.first < first)
        {
            return false;
        }
        if(second < rhs_.second)
        {
            return true;
        }
        else if(rhs_.second < second)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TConnection& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TConnection& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TConnection& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TConnection& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<TConnection> TConnections;

struct TJointData
{
    ::RoboCompPerson::TJointNames jointNames;
    ::RoboCompPerson::TConnections connections;
};

}

namespace RoboCompPerson
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompPerson::Person::begin_getJointData.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_getJointData.
 */
class Callback_Person_getJointData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Person_getJointData_Base> Callback_Person_getJointDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompPerson::Person::begin_getPerson.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_getPerson.
 */
class Callback_Person_getPerson_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Person_getPerson_Base> Callback_Person_getPersonPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompPerson::Person::begin_setPerson.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_setPerson.
 */
class Callback_Person_setPerson_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Person_setPerson_Base> Callback_Person_setPersonPtr;

}

namespace IceProxy
{

namespace RoboCompPerson
{

class Person : public virtual ::Ice::Proxy<Person, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompPerson::TJointData getJointData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getJointData(_iceI_begin_getJointData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getJointData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getJointData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJointData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointData(const ::RoboCompPerson::Callback_Person_getJointDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointData(const ::Ice::Context& context, const ::RoboCompPerson::Callback_Person_getJointDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointData(context, cb, cookie);
    }

    ::RoboCompPerson::TJointData end_getJointData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getJointData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompPerson::TPerson getPerson(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPerson(_iceI_begin_getPerson(id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPerson(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPerson(id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPerson(::Ice::Int id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPerson(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPerson(::Ice::Int id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPerson(id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPerson(::Ice::Int id, const ::RoboCompPerson::Callback_Person_getPersonPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPerson(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPerson(::Ice::Int id, const ::Ice::Context& context, const ::RoboCompPerson::Callback_Person_getPersonPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPerson(id, context, cb, cookie);
    }

    ::RoboCompPerson::TPerson end_getPerson(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPerson(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setPerson(const ::RoboCompPerson::TPerson& person, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPerson(_iceI_begin_setPerson(person, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPerson(const ::RoboCompPerson::TPerson& person, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPerson(person, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPerson(const ::RoboCompPerson::TPerson& person, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPerson(person, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPerson(const ::RoboCompPerson::TPerson& person, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPerson(person, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPerson(const ::RoboCompPerson::TPerson& person, const ::RoboCompPerson::Callback_Person_setPersonPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPerson(person, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPerson(const ::RoboCompPerson::TPerson& person, const ::Ice::Context& context, const ::RoboCompPerson::Callback_Person_setPersonPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPerson(person, context, cb, cookie);
    }

    void end_setPerson(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPerson(const ::RoboCompPerson::TPerson&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompPerson
{

class Person : public virtual ::Ice::Object
{
public:

    typedef PersonPrx ProxyType;
    typedef PersonPtr PointerType;

    virtual ~Person();

#ifdef ICE_CPP11_COMPILER
    Person() = default;
    Person(const Person&) = default;
    Person& operator=(const Person&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TJointData getJointData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getJointData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TPerson getPerson(::Ice::Int id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPerson(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPerson(const TPerson& person, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setPerson(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Person& lhs, const Person& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Person& lhs, const Person& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompPerson::KeyPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompPerson::KeyPoint, S>
{
    static void write(S* ostr, const ::RoboCompPerson::KeyPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.i);
        ostr->write(v.j);
        ostr->write(v.xw);
        ostr->write(v.yw);
        ostr->write(v.zw);
        ostr->write(v.score);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPerson::KeyPoint, S>
{
    static void read(S* istr, ::RoboCompPerson::KeyPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.i);
        istr->read(v.j);
        istr->read(v.xw);
        istr->read(v.yw);
        istr->read(v.zw);
        istr->read(v.score);
    }
};

template<>
struct StreamableTraits< ::RoboCompPerson::TPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompPerson::TPerson, S>
{
    static void write(S* ostr, const ::RoboCompPerson::TPerson& v)
    {
        ostr->write(v.id);
        ostr->write(v.orientation);
        ostr->write(v.joints);
        ostr->write(v.timestamp);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPerson::TPerson, S>
{
    static void read(S* istr, ::RoboCompPerson::TPerson& v)
    {
        istr->read(v.id);
        istr->read(v.orientation);
        istr->read(v.joints);
        istr->read(v.timestamp);
    }
};

template<>
struct StreamableTraits< ::RoboCompPerson::TConnection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompPerson::TConnection, S>
{
    static void write(S* ostr, const ::RoboCompPerson::TConnection& v)
    {
        ostr->write(v.first);
        ostr->write(v.second);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPerson::TConnection, S>
{
    static void read(S* istr, ::RoboCompPerson::TConnection& v)
    {
        istr->read(v.first);
        istr->read(v.second);
    }
};

template<>
struct StreamableTraits< ::RoboCompPerson::TJointData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompPerson::TJointData, S>
{
    static void write(S* ostr, const ::RoboCompPerson::TJointData& v)
    {
        ostr->write(v.jointNames);
        ostr->write(v.connections);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPerson::TJointData, S>
{
    static void read(S* istr, ::RoboCompPerson::TJointData& v)
    {
        istr->read(v.jointNames);
        istr->read(v.connections);
    }
};

}
/// \endcond

namespace RoboCompPerson
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompPerson::Person::begin_getJointData.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_getJointData.
 */
template<class T>
class CallbackNC_Person_getJointData : public Callback_Person_getJointData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TJointData&);

    CallbackNC_Person_getJointData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        PersonPrx proxy = PersonPrx::uncheckedCast(result->getProxy());
        TJointData ret;
        try
        {
            ret = proxy->end_getJointData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getJointData.
 */
template<class T> Callback_Person_getJointDataPtr
newCallback_Person_getJointData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TJointData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_getJointData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getJointData.
 */
template<class T> Callback_Person_getJointDataPtr
newCallback_Person_getJointData(T* instance, void (T::*cb)(const TJointData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_getJointData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompPerson::Person::begin_getJointData.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_getJointData.
 */
template<class T, typename CT>
class Callback_Person_getJointData : public Callback_Person_getJointData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TJointData&, const CT&);

    Callback_Person_getJointData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        PersonPrx proxy = PersonPrx::uncheckedCast(result->getProxy());
        TJointData ret;
        try
        {
            ret = proxy->end_getJointData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getJointData.
 */
template<class T, typename CT> Callback_Person_getJointDataPtr
newCallback_Person_getJointData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TJointData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_getJointData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getJointData.
 */
template<class T, typename CT> Callback_Person_getJointDataPtr
newCallback_Person_getJointData(T* instance, void (T::*cb)(const TJointData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_getJointData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompPerson::Person::begin_getPerson.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_getPerson.
 */
template<class T>
class CallbackNC_Person_getPerson : public Callback_Person_getPerson_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TPerson&);

    CallbackNC_Person_getPerson(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        PersonPrx proxy = PersonPrx::uncheckedCast(result->getProxy());
        TPerson ret;
        try
        {
            ret = proxy->end_getPerson(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getPerson.
 */
template<class T> Callback_Person_getPersonPtr
newCallback_Person_getPerson(const IceUtil::Handle<T>& instance, void (T::*cb)(const TPerson&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_getPerson<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getPerson.
 */
template<class T> Callback_Person_getPersonPtr
newCallback_Person_getPerson(T* instance, void (T::*cb)(const TPerson&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_getPerson<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompPerson::Person::begin_getPerson.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_getPerson.
 */
template<class T, typename CT>
class Callback_Person_getPerson : public Callback_Person_getPerson_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TPerson&, const CT&);

    Callback_Person_getPerson(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        PersonPrx proxy = PersonPrx::uncheckedCast(result->getProxy());
        TPerson ret;
        try
        {
            ret = proxy->end_getPerson(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getPerson.
 */
template<class T, typename CT> Callback_Person_getPersonPtr
newCallback_Person_getPerson(const IceUtil::Handle<T>& instance, void (T::*cb)(const TPerson&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_getPerson<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_getPerson.
 */
template<class T, typename CT> Callback_Person_getPersonPtr
newCallback_Person_getPerson(T* instance, void (T::*cb)(const TPerson&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_getPerson<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompPerson::Person::begin_setPerson.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_setPerson.
 */
template<class T>
class CallbackNC_Person_setPerson : public Callback_Person_setPerson_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Person_setPerson(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T> Callback_Person_setPersonPtr
newCallback_Person_setPerson(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_setPerson<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T> Callback_Person_setPersonPtr
newCallback_Person_setPerson(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_setPerson<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T> Callback_Person_setPersonPtr
newCallback_Person_setPerson(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_setPerson<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T> Callback_Person_setPersonPtr
newCallback_Person_setPerson(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Person_setPerson<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompPerson::Person::begin_setPerson.
 * Create a wrapper instance by calling ::RoboCompPerson::newCallback_Person_setPerson.
 */
template<class T, typename CT>
class Callback_Person_setPerson : public Callback_Person_setPerson_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Person_setPerson(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T, typename CT> Callback_Person_setPersonPtr
newCallback_Person_setPerson(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_setPerson<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T, typename CT> Callback_Person_setPersonPtr
newCallback_Person_setPerson(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_setPerson<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T, typename CT> Callback_Person_setPersonPtr
newCallback_Person_setPerson(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_setPerson<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPerson::Person::begin_setPerson.
 */
template<class T, typename CT> Callback_Person_setPersonPtr
newCallback_Person_setPerson(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Person_setPerson<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
