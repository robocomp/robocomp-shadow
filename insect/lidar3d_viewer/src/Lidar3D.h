//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Lidar3D.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Lidar3D_h__
#define __Lidar3D_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompLidar3D
{

class Lidar3D;
class Lidar3DPrx;

}

namespace RoboCompLidar3D
{

struct TPoint
{
    float x;
    float y;
    float z;
    int intensity;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const int&> ice_tuple() const
    {
        return std::tie(x, y, z, intensity);
    }
};

using TLidarData = ::std::vector<TPoint>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompLidar3D
{

class Lidar3D : public virtual ::Ice::Object
{
public:

    using ProxyType = Lidar3DPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TLidarData getLidarData(int start, int len, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompLidar3D
{

class Lidar3DPrx : public virtual ::Ice::Proxy<Lidar3DPrx, ::Ice::ObjectPrx>
{
public:

    TLidarData getLidarData(int start, int len, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TLidarData>(true, this, &Lidar3DPrx::_iceI_getLidarData, start, len, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLidarDataAsync(int start, int len, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLidar3D::TLidarData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TLidarData, P>(false, this, &Lidar3DPrx::_iceI_getLidarData, start, len, context);
    }

    ::std::function<void()>
    getLidarDataAsync(int start, int len,
                      ::std::function<void(::RoboCompLidar3D::TLidarData)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLidar3D::TLidarData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidar3D::Lidar3DPrx::_iceI_getLidarData, start, len, context);
    }

    /// \cond INTERNAL
    void _iceI_getLidarData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLidar3D::TLidarData>>&, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    Lidar3DPrx() = default;
    friend ::std::shared_ptr<Lidar3DPrx> IceInternal::createProxy<Lidar3DPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompLidar3D::TPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompLidar3D::TPoint, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TPoint& v)
    {
        istr->readAll(v.x, v.y, v.z, v.intensity);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompLidar3D
{

using Lidar3DPtr = ::std::shared_ptr<Lidar3D>;
using Lidar3DPrxPtr = ::std::shared_ptr<Lidar3DPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompLidar3D
{

class Lidar3D;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Lidar3D>&);
::IceProxy::Ice::Object* upCast(Lidar3D*);
/// \endcond

}

}

namespace RoboCompLidar3D
{

class Lidar3D;
/// \cond INTERNAL
::Ice::Object* upCast(Lidar3D*);
/// \endcond
typedef ::IceInternal::Handle< Lidar3D> Lidar3DPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompLidar3D::Lidar3D> Lidar3DPrx;
typedef Lidar3DPrx Lidar3DPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Lidar3DPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompLidar3D
{

struct TPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Int intensity;
};

typedef ::std::vector<TPoint> TLidarData;

}

namespace RoboCompLidar3D
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarData.
 */
class Callback_Lidar3D_getLidarData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lidar3D_getLidarData_Base> Callback_Lidar3D_getLidarDataPtr;

}

namespace IceProxy
{

namespace RoboCompLidar3D
{

class Lidar3D : public virtual ::Ice::Proxy<Lidar3D, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompLidar3D::TLidarData getLidarData(::Ice::Int start, ::Ice::Int len, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLidarData(_iceI_begin_getLidarData(start, len, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLidarData(::Ice::Int start, ::Ice::Int len, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLidarData(start, len, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(::Ice::Int start, ::Ice::Int len, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(start, len, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(::Ice::Int start, ::Ice::Int len, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(start, len, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(::Ice::Int start, ::Ice::Int len, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(start, len, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(::Ice::Int start, ::Ice::Int len, const ::Ice::Context& context, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(start, len, context, cb, cookie);
    }

    ::RoboCompLidar3D::TLidarData end_getLidarData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLidarData(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompLidar3D
{

class Lidar3D : public virtual ::Ice::Object
{
public:

    typedef Lidar3DPrx ProxyType;
    typedef Lidar3DPtr PointerType;

    virtual ~Lidar3D();

#ifdef ICE_CPP11_COMPILER
    Lidar3D() = default;
    Lidar3D(const Lidar3D&) = default;
    Lidar3D& operator=(const Lidar3D&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TLidarData getLidarData(::Ice::Int start, ::Ice::Int len, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Lidar3D& lhs, const Lidar3D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Lidar3D& lhs, const Lidar3D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompLidar3D::TPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompLidar3D::TPoint, S>
{
    static void write(S* ostr, const ::RoboCompLidar3D::TPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.intensity);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLidar3D::TPoint, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.intensity);
    }
};

}
/// \endcond

namespace RoboCompLidar3D
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarData.
 */
template<class T>
class CallbackNC_Lidar3D_getLidarData : public Callback_Lidar3D_getLidarData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TLidarData&);

    CallbackNC_Lidar3D_getLidarData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TLidarData ret;
        try
        {
            ret = proxy->end_getLidarData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLidarData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(T* instance, void (T::*cb)(const TLidarData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarData.
 */
template<class T, typename CT>
class Callback_Lidar3D_getLidarData : public Callback_Lidar3D_getLidarData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TLidarData&, const CT&);

    Callback_Lidar3D_getLidarData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TLidarData ret;
        try
        {
            ret = proxy->end_getLidarData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLidarData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(T* instance, void (T::*cb)(const TLidarData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
