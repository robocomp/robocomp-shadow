//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Gridder.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Gridder.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompGridder_Gridder_ids[2] =
{
    "::Ice::Object",
    "::RoboCompGridder::Gridder"
};
const ::std::string iceC_RoboCompGridder_Gridder_ops[] =
{
    "IsPathBlocked",
    "LineOfSightToTarget",
    "getClosestFreePoint",
    "getDimensions",
    "getPaths",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setGridDimensions",
    "setLocationAndGetPath"
};
const ::std::string iceC_RoboCompGridder_Gridder_IsPathBlocked_name = "IsPathBlocked";
const ::std::string iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name = "LineOfSightToTarget";
const ::std::string iceC_RoboCompGridder_Gridder_getClosestFreePoint_name = "getClosestFreePoint";
const ::std::string iceC_RoboCompGridder_Gridder_getDimensions_name = "getDimensions";
const ::std::string iceC_RoboCompGridder_Gridder_getPaths_name = "getPaths";
const ::std::string iceC_RoboCompGridder_Gridder_setGridDimensions_name = "setGridDimensions";
const ::std::string iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name = "setLocationAndGetPath";

}

bool
RoboCompGridder::Gridder::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompGridder_Gridder_ids, iceC_RoboCompGridder_Gridder_ids + 2, s);
}

::std::vector<::std::string>
RoboCompGridder::Gridder::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompGridder_Gridder_ids[0], &iceC_RoboCompGridder_Gridder_ids[2]);
}

::std::string
RoboCompGridder::Gridder::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompGridder::Gridder::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompGridder::Gridder";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_IsPathBlocked(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TPath iceP_path;
    istr->readAll(iceP_path);
    inS.endReadParams();
    bool ret = this->IsPathBlocked(::std::move(iceP_path), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_LineOfSightToTarget(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TPoint iceP_source;
    TPoint iceP_target;
    float iceP_robotRadius;
    istr->readAll(iceP_source, iceP_target, iceP_robotRadius);
    inS.endReadParams();
    bool ret = this->LineOfSightToTarget(::std::move(iceP_source), ::std::move(iceP_target), iceP_robotRadius, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_getClosestFreePoint(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TPoint iceP_source;
    istr->readAll(iceP_source);
    inS.endReadParams();
    TPoint ret = this->getClosestFreePoint(::std::move(iceP_source), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_getDimensions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    TDimensions ret = this->getDimensions(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_getPaths(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TPoint iceP_source;
    TPoint iceP_target;
    int iceP_maxPaths;
    bool iceP_tryClosestFreePoint;
    bool iceP_targetIsHuman;
    istr->readAll(iceP_source, iceP_target, iceP_maxPaths, iceP_tryClosestFreePoint, iceP_targetIsHuman);
    inS.endReadParams();
    Result ret = this->getPaths(::std::move(iceP_source), ::std::move(iceP_target), iceP_maxPaths, iceP_tryClosestFreePoint, iceP_targetIsHuman, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_setGridDimensions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TDimensions iceP_dimensions;
    istr->readAll(iceP_dimensions);
    inS.endReadParams();
    bool ret = this->setGridDimensions(::std::move(iceP_dimensions), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_setLocationAndGetPath(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TPoint iceP_source;
    TPoint iceP_target;
    TPointVector iceP_freePoints;
    TPointVector iceP_obstaclePoints;
    istr->readAll(iceP_source, iceP_target, iceP_freePoints, iceP_obstaclePoints);
    inS.endReadParams();
    Result ret = this->setLocationAndGetPath(::std::move(iceP_source), ::std::move(iceP_target), ::std::move(iceP_freePoints), ::std::move(iceP_obstaclePoints), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompGridder_Gridder_ops, iceC_RoboCompGridder_Gridder_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompGridder_Gridder_ops)
    {
        case 0:
        {
            return _iceD_IsPathBlocked(in, current);
        }
        case 1:
        {
            return _iceD_LineOfSightToTarget(in, current);
        }
        case 2:
        {
            return _iceD_getClosestFreePoint(in, current);
        }
        case 3:
        {
            return _iceD_getDimensions(in, current);
        }
        case 4:
        {
            return _iceD_getPaths(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_setGridDimensions(in, current);
        }
        case 10:
        {
            return _iceD_setLocationAndGetPath(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::GridderPrx::_iceI_IsPathBlocked(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const TPath& iceP_path, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_IsPathBlocked_name);
    outAsync->invoke(iceC_RoboCompGridder_Gridder_IsPathBlocked_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_path);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::GridderPrx::_iceI_LineOfSightToTarget(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const TPoint& iceP_source, const TPoint& iceP_target, float iceP_robotRadius, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name);
    outAsync->invoke(iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_source, iceP_target, iceP_robotRadius);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::GridderPrx::_iceI_getClosestFreePoint(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGridder::TPoint>>& outAsync, const TPoint& iceP_source, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_getClosestFreePoint_name);
    outAsync->invoke(iceC_RoboCompGridder_Gridder_getClosestFreePoint_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_source);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::GridderPrx::_iceI_getDimensions(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGridder::TDimensions>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_getDimensions_name);
    outAsync->invoke(iceC_RoboCompGridder_Gridder_getDimensions_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::GridderPrx::_iceI_getPaths(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGridder::Result>>& outAsync, const TPoint& iceP_source, const TPoint& iceP_target, int iceP_maxPaths, bool iceP_tryClosestFreePoint, bool iceP_targetIsHuman, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_getPaths_name);
    outAsync->invoke(iceC_RoboCompGridder_Gridder_getPaths_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_source, iceP_target, iceP_maxPaths, iceP_tryClosestFreePoint, iceP_targetIsHuman);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::GridderPrx::_iceI_setGridDimensions(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const TDimensions& iceP_dimensions, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_setGridDimensions_name);
    outAsync->invoke(iceC_RoboCompGridder_Gridder_setGridDimensions_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_dimensions);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::GridderPrx::_iceI_setLocationAndGetPath(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGridder::Result>>& outAsync, const TPoint& iceP_source, const TPoint& iceP_target, const TPointVector& iceP_freePoints, const TPointVector& iceP_obstaclePoints, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name);
    outAsync->invoke(iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_source, iceP_target, iceP_freePoints, iceP_obstaclePoints);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompGridder::GridderPrx::_newInstance() const
{
    return ::IceInternal::createProxy<GridderPrx>();
}
/// \endcond

const ::std::string&
RoboCompGridder::GridderPrx::ice_staticId()
{
    return Gridder::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompGridder_Gridder_IsPathBlocked_name = "IsPathBlocked";

const ::std::string iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name = "LineOfSightToTarget";

const ::std::string iceC_RoboCompGridder_Gridder_getClosestFreePoint_name = "getClosestFreePoint";

const ::std::string iceC_RoboCompGridder_Gridder_getDimensions_name = "getDimensions";

const ::std::string iceC_RoboCompGridder_Gridder_getPaths_name = "getPaths";

const ::std::string iceC_RoboCompGridder_Gridder_setGridDimensions_name = "setGridDimensions";

const ::std::string iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name = "setLocationAndGetPath";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompGridder::upCast(Gridder* p) { return p; }

void
::IceProxy::RoboCompGridder::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Gridder>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Gridder;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompGridder::Gridder::_iceI_begin_IsPathBlocked(const ::RoboCompGridder::TPath& iceP_path, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_IsPathBlocked_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompGridder_Gridder_IsPathBlocked_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompGridder_Gridder_IsPathBlocked_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_path);
        result->endWriteParams();
        result->invoke(iceC_RoboCompGridder_Gridder_IsPathBlocked_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompGridder::Gridder::end_IsPathBlocked(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompGridder_Gridder_IsPathBlocked_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompGridder::Gridder::_iceI_begin_LineOfSightToTarget(const ::RoboCompGridder::TPoint& iceP_source, const ::RoboCompGridder::TPoint& iceP_target, ::Ice::Float iceP_robotRadius, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_source);
        ostr->write(iceP_target);
        ostr->write(iceP_robotRadius);
        result->endWriteParams();
        result->invoke(iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompGridder::Gridder::end_LineOfSightToTarget(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompGridder_Gridder_LineOfSightToTarget_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompGridder::Gridder::_iceI_begin_getClosestFreePoint(const ::RoboCompGridder::TPoint& iceP_source, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_getClosestFreePoint_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompGridder_Gridder_getClosestFreePoint_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompGridder_Gridder_getClosestFreePoint_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_source);
        result->endWriteParams();
        result->invoke(iceC_RoboCompGridder_Gridder_getClosestFreePoint_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompGridder::TPoint
IceProxy::RoboCompGridder::Gridder::end_getClosestFreePoint(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompGridder_Gridder_getClosestFreePoint_name);
    ::RoboCompGridder::TPoint ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompGridder::Gridder::_iceI_begin_getDimensions(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_getDimensions_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompGridder_Gridder_getDimensions_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompGridder_Gridder_getDimensions_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompGridder_Gridder_getDimensions_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompGridder::TDimensions
IceProxy::RoboCompGridder::Gridder::end_getDimensions(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompGridder_Gridder_getDimensions_name);
    ::RoboCompGridder::TDimensions ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompGridder::Gridder::_iceI_begin_getPaths(const ::RoboCompGridder::TPoint& iceP_source, const ::RoboCompGridder::TPoint& iceP_target, ::Ice::Int iceP_maxPaths, bool iceP_tryClosestFreePoint, bool iceP_targetIsHuman, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_getPaths_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompGridder_Gridder_getPaths_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompGridder_Gridder_getPaths_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_source);
        ostr->write(iceP_target);
        ostr->write(iceP_maxPaths);
        ostr->write(iceP_tryClosestFreePoint);
        ostr->write(iceP_targetIsHuman);
        result->endWriteParams();
        result->invoke(iceC_RoboCompGridder_Gridder_getPaths_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompGridder::Result
IceProxy::RoboCompGridder::Gridder::end_getPaths(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompGridder_Gridder_getPaths_name);
    ::RoboCompGridder::Result ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompGridder::Gridder::_iceI_begin_setGridDimensions(const ::RoboCompGridder::TDimensions& iceP_dimensions, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_setGridDimensions_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompGridder_Gridder_setGridDimensions_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompGridder_Gridder_setGridDimensions_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_dimensions);
        result->endWriteParams();
        result->invoke(iceC_RoboCompGridder_Gridder_setGridDimensions_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompGridder::Gridder::end_setGridDimensions(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompGridder_Gridder_setGridDimensions_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompGridder::Gridder::_iceI_begin_setLocationAndGetPath(const ::RoboCompGridder::TPoint& iceP_source, const ::RoboCompGridder::TPoint& iceP_target, const ::RoboCompGridder::TPointVector& iceP_freePoints, const ::RoboCompGridder::TPointVector& iceP_obstaclePoints, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_source);
        ostr->write(iceP_target);
        ostr->write(iceP_freePoints);
        ostr->write(iceP_obstaclePoints);
        result->endWriteParams();
        result->invoke(iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompGridder::Result
IceProxy::RoboCompGridder::Gridder::end_setLocationAndGetPath(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompGridder_Gridder_setLocationAndGetPath_name);
    ::RoboCompGridder::Result ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompGridder::Gridder::_newInstance() const
{
    return new Gridder;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompGridder::Gridder::ice_staticId()
{
    return ::RoboCompGridder::Gridder::ice_staticId();
}

RoboCompGridder::Gridder::~Gridder()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompGridder::upCast(Gridder* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompGridder_Gridder_ids[2] =
{
    "::Ice::Object",
    "::RoboCompGridder::Gridder"
};

}

bool
RoboCompGridder::Gridder::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompGridder_Gridder_ids, iceC_RoboCompGridder_Gridder_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompGridder::Gridder::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompGridder_Gridder_ids[0], &iceC_RoboCompGridder_Gridder_ids[2]);
}

const ::std::string&
RoboCompGridder::Gridder::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompGridder::Gridder::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompGridder::Gridder";
    return typeId;
#else
    return iceC_RoboCompGridder_Gridder_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_IsPathBlocked(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TPath iceP_path;
    istr->read(iceP_path);
    inS.endReadParams();
    bool ret = this->IsPathBlocked(iceP_path, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_LineOfSightToTarget(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TPoint iceP_source;
    TPoint iceP_target;
    ::Ice::Float iceP_robotRadius;
    istr->read(iceP_source);
    istr->read(iceP_target);
    istr->read(iceP_robotRadius);
    inS.endReadParams();
    bool ret = this->LineOfSightToTarget(iceP_source, iceP_target, iceP_robotRadius, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_getClosestFreePoint(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TPoint iceP_source;
    istr->read(iceP_source);
    inS.endReadParams();
    TPoint ret = this->getClosestFreePoint(iceP_source, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_getDimensions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    TDimensions ret = this->getDimensions(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_getPaths(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TPoint iceP_source;
    TPoint iceP_target;
    ::Ice::Int iceP_maxPaths;
    bool iceP_tryClosestFreePoint;
    bool iceP_targetIsHuman;
    istr->read(iceP_source);
    istr->read(iceP_target);
    istr->read(iceP_maxPaths);
    istr->read(iceP_tryClosestFreePoint);
    istr->read(iceP_targetIsHuman);
    inS.endReadParams();
    Result ret = this->getPaths(iceP_source, iceP_target, iceP_maxPaths, iceP_tryClosestFreePoint, iceP_targetIsHuman, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_setGridDimensions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TDimensions iceP_dimensions;
    istr->read(iceP_dimensions);
    inS.endReadParams();
    bool ret = this->setGridDimensions(iceP_dimensions, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceD_setLocationAndGetPath(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TPoint iceP_source;
    TPoint iceP_target;
    TPointVector iceP_freePoints;
    TPointVector iceP_obstaclePoints;
    istr->read(iceP_source);
    istr->read(iceP_target);
    istr->read(iceP_freePoints);
    istr->read(iceP_obstaclePoints);
    inS.endReadParams();
    Result ret = this->setLocationAndGetPath(iceP_source, iceP_target, iceP_freePoints, iceP_obstaclePoints, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompGridder_Gridder_all[] =
{
    "IsPathBlocked",
    "LineOfSightToTarget",
    "getClosestFreePoint",
    "getDimensions",
    "getPaths",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setGridDimensions",
    "setLocationAndGetPath"
};

}

/// \cond INTERNAL
bool
RoboCompGridder::Gridder::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompGridder_Gridder_all, iceC_RoboCompGridder_Gridder_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompGridder_Gridder_all)
    {
        case 0:
        {
            return _iceD_IsPathBlocked(in, current);
        }
        case 1:
        {
            return _iceD_LineOfSightToTarget(in, current);
        }
        case 2:
        {
            return _iceD_getClosestFreePoint(in, current);
        }
        case 3:
        {
            return _iceD_getDimensions(in, current);
        }
        case 4:
        {
            return _iceD_getPaths(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_setGridDimensions(in, current);
        }
        case 10:
        {
            return _iceD_setLocationAndGetPath(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompGridder::Gridder::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Gridder, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompGridder::Gridder::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Gridder, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompGridder::_icePatchObjectPtr(GridderPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = GridderPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Gridder::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
