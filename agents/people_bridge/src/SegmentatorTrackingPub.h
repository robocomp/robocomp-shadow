//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `SegmentatorTrackingPub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __SegmentatorTrackingPub_h__
#define __SegmentatorTrackingPub_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <VisualElementsPub.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompSegmentatorTrackingPub
{

class SegmentatorTrackingPub;
class SegmentatorTrackingPubPrx;

}

namespace RoboCompSegmentatorTrackingPub
{

class SegmentatorTrackingPub : public virtual ::Ice::Object
{
public:

    using ProxyType = SegmentatorTrackingPubPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setTrack(::RoboCompVisualElementsPub::TObject target, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setTrack(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompSegmentatorTrackingPub
{

class SegmentatorTrackingPubPrx : public virtual ::Ice::Proxy<SegmentatorTrackingPubPrx, ::Ice::ObjectPrx>
{
public:

    void setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &SegmentatorTrackingPubPrx::_iceI_setTrack, target, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setTrackAsync(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &SegmentatorTrackingPubPrx::_iceI_setTrack, target, context);
    }

    ::std::function<void()>
    setTrackAsync(const ::RoboCompVisualElementsPub::TObject& target,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompSegmentatorTrackingPub::SegmentatorTrackingPubPrx::_iceI_setTrack, target, context);
    }

    /// \cond INTERNAL
    void _iceI_setTrack(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompVisualElementsPub::TObject&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    SegmentatorTrackingPubPrx() = default;
    friend ::std::shared_ptr<SegmentatorTrackingPubPrx> IceInternal::createProxy<SegmentatorTrackingPubPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompSegmentatorTrackingPub
{

using SegmentatorTrackingPubPtr = ::std::shared_ptr<SegmentatorTrackingPub>;
using SegmentatorTrackingPubPrxPtr = ::std::shared_ptr<SegmentatorTrackingPubPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompSegmentatorTrackingPub
{

class SegmentatorTrackingPub;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< SegmentatorTrackingPub>&);
::IceProxy::Ice::Object* upCast(SegmentatorTrackingPub*);
/// \endcond

}

}

namespace RoboCompSegmentatorTrackingPub
{

class SegmentatorTrackingPub;
/// \cond INTERNAL
::Ice::Object* upCast(SegmentatorTrackingPub*);
/// \endcond
typedef ::IceInternal::Handle< SegmentatorTrackingPub> SegmentatorTrackingPubPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub> SegmentatorTrackingPubPrx;
typedef SegmentatorTrackingPubPrx SegmentatorTrackingPubPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(SegmentatorTrackingPubPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompSegmentatorTrackingPub
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 * Create a wrapper instance by calling ::RoboCompSegmentatorTrackingPub::newCallback_SegmentatorTrackingPub_setTrack.
 */
class Callback_SegmentatorTrackingPub_setTrack_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SegmentatorTrackingPub_setTrack_Base> Callback_SegmentatorTrackingPub_setTrackPtr;

}

namespace IceProxy
{

namespace RoboCompSegmentatorTrackingPub
{

class SegmentatorTrackingPub : public virtual ::Ice::Proxy<SegmentatorTrackingPub, ::IceProxy::Ice::Object>
{
public:

    void setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setTrack(_iceI_begin_setTrack(target, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setTrack(target, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTrack(target, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTrack(target, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::RoboCompSegmentatorTrackingPub::Callback_SegmentatorTrackingPub_setTrackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTrack(target, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::Context& context, const ::RoboCompSegmentatorTrackingPub::Callback_SegmentatorTrackingPub_setTrackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTrack(target, context, cb, cookie);
    }

    void end_setTrack(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setTrack(const ::RoboCompVisualElementsPub::TObject&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompSegmentatorTrackingPub
{

class SegmentatorTrackingPub : public virtual ::Ice::Object
{
public:

    typedef SegmentatorTrackingPubPrx ProxyType;
    typedef SegmentatorTrackingPubPtr PointerType;

    virtual ~SegmentatorTrackingPub();

#ifdef ICE_CPP11_COMPILER
    SegmentatorTrackingPub() = default;
    SegmentatorTrackingPub(const SegmentatorTrackingPub&) = default;
    SegmentatorTrackingPub& operator=(const SegmentatorTrackingPub&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setTrack(const ::RoboCompVisualElementsPub::TObject& target, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setTrack(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const SegmentatorTrackingPub& lhs, const SegmentatorTrackingPub& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const SegmentatorTrackingPub& lhs, const SegmentatorTrackingPub& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace RoboCompSegmentatorTrackingPub
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 * Create a wrapper instance by calling ::RoboCompSegmentatorTrackingPub::newCallback_SegmentatorTrackingPub_setTrack.
 */
template<class T>
class CallbackNC_SegmentatorTrackingPub_setTrack : public Callback_SegmentatorTrackingPub_setTrack_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SegmentatorTrackingPub_setTrack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SegmentatorTrackingPub_setTrack<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SegmentatorTrackingPub_setTrack<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SegmentatorTrackingPub_setTrack<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SegmentatorTrackingPub_setTrack<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 * Create a wrapper instance by calling ::RoboCompSegmentatorTrackingPub::newCallback_SegmentatorTrackingPub_setTrack.
 */
template<class T, typename CT>
class Callback_SegmentatorTrackingPub_setTrack : public Callback_SegmentatorTrackingPub_setTrack_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SegmentatorTrackingPub_setTrack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T, typename CT> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SegmentatorTrackingPub_setTrack<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T, typename CT> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SegmentatorTrackingPub_setTrack<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T, typename CT> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SegmentatorTrackingPub_setTrack<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSegmentatorTrackingPub::SegmentatorTrackingPub::begin_setTrack.
 */
template<class T, typename CT> Callback_SegmentatorTrackingPub_setTrackPtr
newCallback_SegmentatorTrackingPub_setTrack(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SegmentatorTrackingPub_setTrack<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
