[
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/src/long_term_graph.py",
    "content": {
      "structured": {
        "description": "A 2D environment with obstacles and a player, and uses a probabilistic algorithm to compute the shortest path between two points in the environment while avoiding obstacles. It also provides functions to draw the environment and its objects on a figure using Matplotlib, and to compute the projective coordinates of the corners of a room in the environment frame. Additionally, it defines functions to get the list of objects in a room by type and their projective coordinates in the room frame. The code uses the Geometry package for computing shortest paths and the Matplotlib library for drawing visualizations.",
        "items": [
          {
            "id": "7453d1a9-2093-7088-9941-e01ea3c40300",
            "ancestors": [],
            "description": "Computes and draws a graph representation of a long-term memory space, allowing for door-based navigation and metric reconstruction. It takes in a set of rooms and their connections as well as a base room name and computes the metric map between them.",
            "attributes": [
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to store a graph representation of a long-term spatial memory task. It contains nodes, edges, and types (rooms, doors, walls) that are used to compute the metric map."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a pickled file. It returns a `Subgraph` object representing the graph."
              },
              {
                "name": "fig",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to store the figure object that will be drawn with the graph."
              },
              {
                "name": "ax",
                "type_name": "Axes",
                "description": "Used to store the axis object for plotting the graph."
              },
              {
                "name": "fig_2",
                "type_name": "MatplotlibFigure",
                "description": "Used to store a figure object used for drawing the graph."
              },
              {
                "name": "ax_2",
                "type_name": "Axis",
                "description": "Used to represent the graph's second axis, which is used for the metric reconstruction \nplot. It provides functions to set the title, labels, and limits for this axis."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 244,
            "docLength": null
          },
          {
            "id": "89c82564-d052-e2bf-6549-98b7754116ea",
            "ancestors": [
              "7453d1a9-2093-7088-9941-e01ea3c40300"
            ],
            "description": "In the LongTermGraph class reads a graph from a file, creates subplots for metric reconstruction and LTSM display, and initializes the graph object.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the name of the graph file to read."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "97a1ea39-6c18-2888-1d49-0d9df0c43f81",
            "ancestors": [
              "7453d1a9-2093-7088-9941-e01ea3c40300"
            ],
            "description": "Generates a graph visualization of a subgraph of a larger graph, based on node and edge types. It uses the `layout` parameter to specify the layout algorithm and colors nodes and edges based on their type.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter the nodes and edges displayed on the graph based on their types, with \"room\" being the default value for only rooms are shown."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 220,
              "insert": 221,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/g2o_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and provides a kill signal for shutting down the worker. The code also sets up an ice slice and imports a RoboCompCommonBehavior module. Additionally, the code creates a Ui_guiDlg class and initializes a timer to call a method every 30 milliseconds.",
        "items": [
          {
            "id": "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8",
            "ancestors": [],
            "description": "Manages a worker process with a periodic timer and provides a signal for termination. It also has a method to set the period of the timer.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreSignal",
                "description": "Used to emit a signal when the object needs to be killed."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to initialize and access the user interface of the widget."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect access to the internal state of the worker object, particularly the timer and kill signal."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "30 milliseconds by default, which represents the time interval for the timer to run."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `killYourSelf` slot after a specified period of time."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "795c292f-f253-f1aa-a748-23953c9013be",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Initializes an instance of the `GenericWorker` class, setting up a GUI dialog and creating a mutex for managing access to the timer. It also sets the period of the timer to 30 seconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as an argument for the setupUi method."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "ea51cd3f-4286-88a2-5c4e-a765280c1202",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Emits the `kill` signal, indicating that the instance should be destroyed.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "20082581-a4f0-66af-9a45-78e2e70b070f",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Updates the `Period` attribute and starts a timer with the new period value using the `timer.start()` method.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/g2o_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class named `G2O` that handles various graph related tasks such as adding and deleting nodes and edges, updating edge attributes, and setting RT translation and rotation values. It also defines several functions for updating node attributes, updating edges, and deleting nodes or edges. The code uses the `networkx` library to handle graphs and their operations.\n\nIn summary, the code is a class that manages graph-related tasks for an RT (Real-Time) system, including adding and removing nodes and edges, updating edge attributes, and setting RT translation and rotation values.",
        "items": [
          {
            "id": "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb",
            "ancestors": [],
            "description": "Is responsible for processing robot poses and creating a graph representation of the environment for a specific worker in a multi-robot system, including handling edges, vertices, odometry, and room changes.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "instance",
                "description": "Used to specify the time interval between updates of the worker's state, allowing for more efficient processing of large datasets."
              },
              {
                "name": "agent_id",
                "type_name": "int",
                "description": "Used as a identifier for the agent that owns the specific worker."
              },
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to store the graph representation of the environment, which is updated based on the worker's observations and actions."
              },
              {
                "name": "startup_check",
                "type_name": "QTimersingleShot",
                "description": "Used to check if the application should quit after a certain time has elapsed since startup. It's used to implement the main loop of the worker, where the worker periodically checks if it should quit based on the current time."
              },
              {
                "name": "rt_api",
                "type_name": "instance",
                "description": "Used to store the RT API object, which is used for real-time data processing and transmission."
              },
              {
                "name": "inner_api",
                "type_name": "instance",
                "description": "Used to store the inner API object of the worker, which allows for communication between the worker and the main thread."
              },
              {
                "name": "odometry_node_id",
                "type_name": "int",
                "description": "3 in this example, indicating that the node with ID 3 represents the odometry information."
              },
              {
                "name": "odometry_queue",
                "type_name": "3D",
                "description": "A list of tuples containing the current pose of the robot, which is updated at each step by the worker. The queue stores the last `N` poses for each node in the graph, where `N` is a user-defined parameter."
              },
              {
                "name": "last_odometry",
                "type_name": "3D",
                "description": "Used to store the last known odometry of the robot, which can be used for visualization and debugging purposes."
              },
              {
                "name": "g2o",
                "type_name": "3D",
                "description": "Used to represent the pose (position, orientation, and scale) of a robot or other object in 3D space. It is used in conjunction with the `get_covariance_matrix` method to compute the covariance matrix of the robot's position and orientation."
              },
              {
                "name": "visualizer",
                "type_name": "instance",
                "description": "A reference to an instance of the `Visualizer` class, which provides a user interface for visualizing the robot's pose and other relevant data in real-time."
              },
              {
                "name": "odometry_noise_std_dev",
                "type_name": "float",
                "description": "0.1 by default, which represents the standard deviation of the noise added to the odometry values during the simulation for more realistic results."
              },
              {
                "name": "odometry_noise_angle_std_dev",
                "type_name": "float",
                "description": "0.8 by default, which represents the standard deviation of the angular noise in the odometry measurement. It affects the optimization process by controlling the spread of the angle values in the graph."
              },
              {
                "name": "measurement_noise_std_dev",
                "type_name": "float",
                "description": "Used to represent the standard deviation of noise in the robot's measurements. It is used in the worker's implementation to scale the measurement values to account for the noise in the data."
              },
              {
                "name": "last_room_id",
                "type_name": "int",
                "description": "Used to store the last room ID seen before the agent switched rooms, which is used to handle room changes during navigation tasks."
              },
              {
                "name": "actual_room_id",
                "type_name": "int",
                "description": "Used to keep track of the current room id that the worker is in, it's updated when the worker moves to a new room."
              },
              {
                "name": "elapsed",
                "type_name": "int",
                "description": "Used to track the elapsed time since the worker was created, which can be used to control the worker's execution time and prevent it from running for too long."
              },
              {
                "name": "room_initialized",
                "type_name": "bool",
                "description": "Used to track whether the robot's room has been initialized or not. It is set to False when the robot moves to a new room, and True otherwise."
              },
              {
                "name": "iterations",
                "type_name": "int",
                "description": "Used to count the number of iterations performed by the worker during its execution. It is incremented each time the worker processes a new iteration of the graph optimization problem."
              },
              {
                "name": "hide",
                "type_name": "str",
                "description": "Used to indicate whether the worker should be hidden or not, defaulting to False."
              },
              {
                "name": "init_graph",
                "type_name": "bool",
                "description": "Used to keep track of whether the graph has been initialized or not, during the processing of the ROS bag file. It's set to True when the graph is first constructed and False when the graph is reconstructed after a change in the environment."
              },
              {
                "name": "current_edge_set",
                "type_name": "bool",
                "description": "Used to indicate whether the current edge set has been updated or not. It's used to track the updates of the edges in real-time."
              },
              {
                "name": "first_rt_set",
                "type_name": "bool",
                "description": "Set to `True` when the worker receives its first RT (Real-time) edge from a \"room\" node, indicating that the worker should start tracking the RT translation and rotation for this room."
              },
              {
                "name": "translation_to_set",
                "type_name": "3D",
                "description": "Used to store the translation of a robot to a set point, calculated based on the RT messages it receives. It is updated in the `update_edge_att` method."
              },
              {
                "name": "rotation_to_set",
                "type_name": "3D",
                "description": "Used to store the rotation of the robot's end effector with respect to a set reference frame. It is updated whenever the robot's pose changes, and is used in the computation of the robot's covariance matrix."
              },
              {
                "name": "room_polygon",
                "type_name": "Polygon",
                "description": "Used to store the polygon representation of a room in the environment. It is used for collision detection and other purposes related to navigation and mapping."
              },
              {
                "name": "security_polygon",
                "type_name": "3D",
                "description": "Used to store the security polygon of the robot, which is a convex polytope used for collision detection and avoidance."
              },
              {
                "name": "initialize_g2o_graph",
                "type_name": "instance",
                "description": "Used to initialize the graph2onedges (G2O) graph during the initialization of the worker, allowing for faster computation of marginals in the optimize method."
              },
              {
                "name": "rt_set_last_time",
                "type_name": "int",
                "description": "Used to store the time when the first RT set was observed by the worker, for updating the translation and rotation of the robot to the set."
              },
              {
                "name": "rt_time_min",
                "type_name": "float",
                "description": "Defined as `self.rt_time_min = 10`. It represents the minimum time interval between two RT sets for the robot to be considered in the RT algorithm."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to create a timer that triggers the worker's method to update the graph every 200 milliseconds."
              },
              {
                "name": "compute",
                "type_name": "lambda",
                "description": "Called when a task is assigned to the worker. It takes the task as input, processes it using a provided function, and returns the result as output."
              },
              {
                "name": "update_node_att",
                "type_name": "Python",
                "description": "Used to update the attributes of a node in the graph when its ID matches the specified ID."
              },
              {
                "name": "update_edge",
                "type_name": "update",
                "description": "Called whenever an edge's attributes change. It checks if the edge is a \"room\" edge and updates the \n\"translation to set\", \"rotation to set\", or \"first RT set\" variables based on the edge's type and \nattributes."
              },
              {
                "name": "update_edge_att",
                "type_name": "edge",
                "description": "Used to update the attributes of an edge in a graph."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 404,
            "docLength": null
          },
          {
            "id": "7d7de271-5f36-6685-a041-992c749eeb89",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Initializes member variables and sets up event handling for signals related to the graph, nodes, edges, and attributes.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map agent id's to their corresponding DSRGraph objects."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to determine whether to run the `startup_check` method or not when initializing the SpecificWorker object."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 51,
              "insert": 52,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 54,
            "docLength": null
          },
          {
            "id": "da0a9261-8bf8-ea87-794b-f1499a4f53d3",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Updates the robot's position, orientations, and security polygon based on the odometry data and the RT graph.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 121,
              "insert": 123,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 90,
            "docLength": null
          },
          {
            "id": "8a63dc4d-4b58-b681-ff4d-4e5147446630",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Initializes a Graph-based Object Recognition (G2O) graph for a specific room by:\n\n1. Finding the corners of the room using ROS topics.\n2. Adding nominal corners to the G2O graph.\n3. Adding fixed poses to the G2O graph for the robot and doors in the room.",
            "params": [],
            "returns": {
              "type_name": "bool",
              "description": "1 if the initialization of the g2o graph was successful, and 0 otherwise."
            },
            "name": "initialize_g2o_graph",
            "location": {
              "start": 238,
              "insert": 241,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 109,
            "docLength": null
          },
          {
            "id": "bef4919b-9b49-2ea6-7e42-9773a84c6c4e",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Calculates the displacement of an object based on its odometry data, computing the lateral displacement, forward displacement, and angular displacement using a moving window approach.",
            "params": [
              {
                "name": "odometry",
                "type_name": "3element",
                "description": "Used to store the robot's motion information at each time step, including its linear displacement, lateral displacement, and angular displacement."
              }
            ],
            "returns": {
              "type_name": "3element",
              "description": "Displacement in three directions (lateral, advance and angular) calculated using the odometry data from a queue."
            },
            "name": "get_displacement",
            "location": {
              "start": 437,
              "insert": 438,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "ae20cbb0-b446-7387-2246-a1505aa2b1c1",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Computes the covariance matrix for a given vertex in a graph, using an optimization algorithm to compute the marginals of the vertices and then constructing the covariance matrix.",
            "params": [
              {
                "name": "vertex",
                "type_name": "g2overtex",
                "description": "Used to compute the covariance matrix of the vertices in the graph."
              }
            ],
            "returns": {
              "type_name": "tuple",
              "description": "2-element, where the first element is a boolean value indicating whether the covariance matrix was computed or not and the second element is the actual covariance matrix."
            },
            "name": "get_covariance_matrix",
            "location": {
              "start": 456,
              "insert": 457,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "67619954-9d16-ceb2-ee47-9e0c50ce26bd",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Within the `SpecificWorker` class loads an G2O file, visualizes its vertices and edges in 3D, and updates the visualization in real-time as the optimizer processes new measurements.",
            "params": [
              {
                "name": "optimizer",
                "type_name": "instance",
                "description": "Used to load G2O files."
              }
            ],
            "returns": null,
            "name": "visualize_g2o_realtime",
            "location": {
              "start": 469,
              "insert": 470,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "ef528e02-66ad-7da9-964d-91a42afb8717",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Updates the attributes of a node in a graph, specifically the odometry node, by appending values to an odometry queue.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to represent the node ID of interest for updating attributes."
              },
              {
                "name": "attribute_names",
                "type_name": "[str]",
                "description": "An array of strings representing the names of attributes to be updated on the node."
              }
            ],
            "returns": null,
            "name": "update_node_att",
            "location": {
              "start": 506,
              "insert": 515,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "fa72d1a2-e9a6-1481-7d44-8a7f242085b0",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Updates an unknown node with the specified ID, performing different actions based on the type of node it represents.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to identify the node being updated."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to specify the node's type, with possible values being \"corner\"."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 522,
              "insert": 532,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "3870a905-4bed-33bc-1444-26249501564e",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Deletes a node from the graph represented by the `SpecificWorker` class, setting the `room_initialized` attribute to `False`.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to identify the node to be deleted."
              }
            ],
            "returns": null,
            "name": "delete_node",
            "location": {
              "start": 534,
              "insert": 535,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "21b579b0-e2c1-b8af-0d49-f97a5f6121e1",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Updates the room ID and sets the current edge set to true when the type is \"current\" or \"RT\" and the source node is a room and the target node is \"Shadow\". It also sets the translation and rotation to set variables when RT is set for the first time.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Used to represent the ID of the current node being processed in the graph."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "The id of the next node in the graph that the edge is pointing to."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to determine which room the edge updates are for, either the current room or RT (room to Shadow)"
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 543,
              "insert": 544,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "5a1c2562-2abe-0a91-2f4d-cda682735284",
            "ancestors": [
              "7f979d1a-dbf9-739d-c442-d7cd92ce4fcb"
            ],
            "description": "Deletes an edge from a graph with specified source and target nodes, based on the type of edge.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Given a value of 13."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Specified as an index of an edge to be deleted."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to specify the edge type to be deleted."
              }
            ],
            "returns": null,
            "name": "delete_edge",
            "location": {
              "start": 571,
              "insert": 572,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/long_term_graph.py",
    "content": {
      "structured": {
        "description": "a function called draw_metric_map that takes in a metric map object and plots the map using Matplotlib. It first loads the graph from a text file and defines various functions to work with the graph, such as get_room_corners, get_room_objects, and get_room_objects_coordinates. These functions recursively traverse the graph to find the corners or objects in a room, respectively. The draw_metric_map function then uses these functions to plot the rooms and objects in the map. Specifically, it plots each room as a rectangle and adds names to each room, and it plots each object as a point and adds a text label with its name.",
        "items": [
          {
            "id": "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8",
            "ancestors": [],
            "description": "Draws a graph of long-term spatial mobility data using PyQt and Matplotlib. It provides methods to visualize rooms, doors, walls, and edges in the graph.",
            "attributes": [
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to represent the graph object that contains the rooms, doors, and walls to be visualized."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a file specified by the user. It takes a string path as input and reads the graph data from it."
              },
              {
                "name": "fig",
                "type_name": "instance",
                "description": "A reference to the figure object that will be used to draw the graph."
              },
              {
                "name": "ax",
                "type_name": "MatplotlibFigure",
                "description": "Used to represent the axis object for the graph. It provides methods for adding patches, lines, and other visual elements to the graph."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 198,
            "docLength": null
          },
          {
            "id": "411ae665-2c3f-efb9-7546-d76e93280634",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Initializes an object of `LongTermGraph` class, loading a graph from a file using the `read_graph` method and displaying its summary.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the name of a file containing a graph represented as an adjacency matrix."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "fbfe681a-6ac8-9cb2-ad48-9c2d64fec643",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Generates a graphical representation of a subgraph within a larger graph, based on node and edge properties. It creates a figure and axis object, sets the title, and draws the nodes and edges using different colors for each type of node or edge.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter the nodes in the graph based on their types, only showing rooms and doors."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 191,
              "insert": 192,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 34,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/main.py",
    "content": {
      "structured": {
        "description": "Three functions: draw_graph, find_edge_with_attribute, and get_connected_door_nodes. The draw_graph function takes a graph object as input and uses PySide2's QtCore module to create a subplot and plot points on the graph. The find_edge_with_attribute function searches for an edge in a given graph based on a specific attribute, and the get_connected_door_nodes function recursively traverses a graph to find all connected door nodes in a given room. The code also loads a graph from a pickled file using the LongTermGraph class, and uses the compute_metric_map and draw_metric_map functions to display the graph's metric map and point locations.",
        "items": [
          {
            "id": "d3824e62-3401-2c9e-394e-2ee9ee755e69",
            "ancestors": [],
            "description": "Generates a graph based on a provided adjacency matrix using Kamada-Kawai layout algorithm, and adds node names and edges with arrowheads.",
            "params": [
              {
                "name": "graph",
                "type_name": "AbstractGraph",
                "description": "Used to represent a graph object that contains vertices and edges."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 6,
              "insert": 7,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "d7906eb3-709a-3c95-7c40-18ce0ab8dcfd",
            "ancestors": [],
            "description": "Searches through a graph's edges for an edge with a specific attribute equal to a given value. If such an edge is found, it returns it; otherwise, it returns `None`.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as an object that contains a collection of edges, where each edge represents a connection between two nodes in the graph."
              },
              {
                "name": "attribute",
                "type_name": "attribute",
                "description": "Used to specify the attribute of interest for finding an edge in a graph."
              },
              {
                "name": "value",
                "type_name": "object",
                "description": "Used to search for an edge in a graph based on a specific attribute."
              }
            ],
            "returns": {
              "type_name": "edge",
              "description": "An untyped reference to a graph edge that has the specified attribute equal to the provided value."
            },
            "name": "find_edge_with_attribute",
            "location": {
              "start": 41,
              "insert": 42,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          },
          {
            "id": "fe2cae8a-54a8-32a7-014a-24ebf3a8e0f2",
            "ancestors": [],
            "description": "Iterates over the edges in a graph and adds to an output list any edge connecting nodes with \"door\" in their names.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as g, which contains a collection of nodes and edges that define a graph structure."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of edges from the given graph."
            },
            "name": "get_room_edges",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e9acd19c-513f-f78e-4949-cd353d1b9b16",
            "ancestors": [],
            "description": "In Java code recursively queries the graph for all nodes connected to a given node via doors, returning a list of such nodes.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph structure."
              },
              {
                "name": "node",
                "type_name": "GraphNode",
                "description": "Referred to as a node in the graph."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of nodes that are connected to a specific node through doors."
            },
            "name": "get_connected_door_nodes",
            "location": {
              "start": 58,
              "insert": 60,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "9a2a2e72-8415-229d-6c4a-657476ccda61",
            "ancestors": [],
            "description": "Navigates through a graph by starting from a given room and visiting all other rooms reachable through doors. It keeps track of visited rooms using a list and prints information about each room it visits.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph with nodes and edges."
              },
              {
                "name": "current_room",
                "type_name": "dict",
                "description": "Represents the current room to be traversed in the graph."
              },
              {
                "name": "visited",
                "type_name": "list",
                "description": "Used to keep track of the rooms that have been visited during the traversal process, initialized to an empty list if None."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of strings representing the rooms that have been visited."
            },
            "name": "traverse_graph",
            "location": {
              "start": 74,
              "insert": 75,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and implements a timer-based mechanism for killing itself after a specified period. It also provides a signal kill to allow for handling of the termination from outside the worker. The code uses PySide2, Ice, and the RoboCompCommonBehavior module.",
        "items": [
          {
            "id": "8a50128c-009f-a1ac-2c45-674f0e62438e",
            "ancestors": [],
            "description": "Manages a timer and a signal to stop its own execution. It has methods to change the timer period and to emit the signal to stop itself.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreQObjectSlot",
                "description": "Used to emit a signal that can be caught by any connected slots to stop the worker's execution."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to setup the user interface of the class."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect the worker's state from concurrent access."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "Used to set the time interval for the timer signal emitted by the `setPeriod()` method, which changes its value on each call."
              },
              {
                "name": "timer",
                "type_name": "QtCoreQTimer",
                "description": "Used to start a timer that emits the `kill` signal after a specified period."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "dc756aa5-ebc6-5490-d649-854bb2ac26a4",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Initializes an object of the `GenericWorker` class, setting up a UI widget, creating a mutex for synchronization, and defining a timer with a period of 500 milliseconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as the parent widget for the GenericWorker object's UI."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "17fccd3d-bcc7-a9a3-5f45-73125f7d1f78",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Emits the `kill` signal, indicating that the object should be terminated.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "a2ebb705-7932-fb9b-3e45-f965c61ebf4d",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Sets the period of a timer and updates the internal variable `Period`.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An agent's internal graph and performs various operations on it, including:\n\n* Generating a room picture by iterating over the room nodes and their RT edges, and drawing a black image proportional to the room size with the room polygon and doors circled in white.\n* Inserting current edge to the room when there is no current edge and the agent's state is \"crossed\".\n* Updating node attributes and node type based on user input.\n* Deleting nodes and edges based on user input.",
        "items": [
          {
            "id": "0a067d35-4dda-36b4-5c41-7f6586689420",
            "ancestors": [],
            "description": "Performs various tasks related to a specific worker in a multi-agent system, such as checking for room occupation, updating node attributes, and generating room images. It also handles insertion and deletion of edges and nodes, and updates the state of the agent based on certain conditions.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "200 milliseconds, which is the time interval between updates of the worker's state."
              },
              {
                "name": "agent_id",
                "type_name": "integerint",
                "description": "Used as a unique identifier for each agent in the swarm."
              },
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to store the graph representation of the environment that the worker is working on. It contains nodes, edges, and other attributes that are relevant for the worker's task."
              },
              {
                "name": "update_node",
                "type_name": "UpdateNode",
                "description": "Used to update the state of a node in the graph based on its ID, type, and affordance state."
              },
              {
                "name": "update_edge",
                "type_name": "str",
                "description": "Used to set a new current edge in the graph when there is no existing current edge and the room node exists."
              },
              {
                "name": "startup_check",
                "type_name": "QTimersingleShot",
                "description": "Used to start the application's shutdown process after a certain period of time (200 milliseconds) since the worker was created."
              },
              {
                "name": "rt_api",
                "type_name": "str",
                "description": "Used for handling robot actions, specifically RT (Remote Transport) actions. It provides a way to interact with the robot's internal API to perform actions such as moving or manipulating objects."
              },
              {
                "name": "inner_api",
                "type_name": "API",
                "description": "Used to access the internal API of the agent, allowing the worker to interact with the agent's internal state and perform actions such as generating room pictures or updating node attributes."
              },
              {
                "name": "robot_name",
                "type_name": "str",
                "description": "Used to store the name of the robot agent in the environment."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "Used to store the ID of the robot node in the graph. It is used to identify the current room and for RT edges."
              },
              {
                "name": "last_robot_pose",
                "type_name": "Pose",
                "description": "Used to store the last known pose of the robot in the environment, which is used for motion planning and collision detection."
              },
              {
                "name": "robot_exit_pose",
                "type_name": "Pose",
                "description": "Used to store the pose of the robot when it exits a room."
              },
              {
                "name": "state",
                "type_name": "str",
                "description": "Used to store the current state of the worker, which can be either \"idle\", \"running\", or \"crossed\"."
              },
              {
                "name": "affordance_node_active_id",
                "type_name": "int",
                "description": "Used to store the ID of the node representing the affordance that the robot is currently interacting with."
              },
              {
                "name": "exit_door_id",
                "type_name": "int",
                "description": "0 by default, indicating the door through which the robot exits a room when it moves to another room."
              },
              {
                "name": "room_exit_door_id",
                "type_name": "int",
                "description": "31 by default, representing the door ID of the room that the worker is exiting."
              },
              {
                "name": "enter_room_node_id",
                "type_name": "int",
                "description": "Used to store the ID of the room node that the worker has entered. It is used to check if the worker has reached the goal state by comparing it with the ID of the goal room node."
              },
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent the graph of nodes and edges in the environment, which is updated based on the worker's actions and observations."
              },
              {
                "name": "vertex_size",
                "type_name": "int",
                "description": "16 by default, indicating the size of each vertex in the graph."
              },
              {
                "name": "not_required_attrs",
                "type_name": "list",
                "description": "Used to store a list of node attributes that are not required for the worker's functionality. It helps in avoiding unnecessary computation and improving performance by skipping the retrieval of these attributes during node traversal."
              },
              {
                "name": "long_term_graph",
                "type_name": "Graph",
                "description": "Used to store the long-term graph of the environment, which represents the entire state of the environment over time."
              },
              {
                "name": "global_map",
                "type_name": "npndarray",
                "description": "Used to store a map of the environment, which is used for navigation and other purposes."
              },
              {
                "name": "insert_current_edge",
                "type_name": "Edge",
                "description": "Used to insert a new edge into the graph with the current room as the source node and the robot node as the destination node, indicating that the robot has entered the current room."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `startup_check()` function after 200 milliseconds of starting the application, which signals the agent to start its work."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "Used to compute the cost of the robot moving from its current state to a new state. It takes into account factors such as distance, obstacles, and door states."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 49,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 533,
            "docLength": null
          },
          {
            "id": "8f7fe684-295f-f8b1-c94d-1c5ce453de90",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Initializes an instance of the SpecificWorker class by setting up various graph structures, defining variables, and connecting signals for updating node and edge positions.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "igraphGraph",
                "description": "Used to specify the graph that represents the environment for the worker agent."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the agent has already started. If set to `False`, it will call the `startup_check` method instead, which initializes the internal state of the agent."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 46,
            "docLength": null
          },
          {
            "id": "b7663dc2-9b1f-eaaf-a64b-a95a80099f99",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Sets parameters and modifies the state of a Room object by removing a self-edge, storing an exit door ID, setting attribute values for doors, and reading an entrance door node to add an other_side_door attribute with the name of the exit door in the new room.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Passed in from outside the function to be processed or modified."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True."
            },
            "name": "setParams",
            "location": {
              "start": 116,
              "insert": 117,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "4b952eb9-acba-209b-de45-48fe3b8d2de5",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Determines the state of a worker based on the current state of the graph and performs appropriate actions according to the state.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 130,
              "insert": 149,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "59d68e36-a969-1390-a64b-66a3c5f1207a",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Generates high-quality summaries of Java code given to it, checks if any \"current\" edge exists, and if not, associates doors based on their proximity.",
            "params": [],
            "returns": null,
            "name": "idle",
            "location": {
              "start": 168,
              "insert": 170,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 71,
            "docLength": null
          },
          {
            "id": "73ce6331-230e-b191-4445-a4e68e4cfb3a",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Manages the node and edge properties for a worker class called `SpecificWorker`, which is an extension of `GenericWorker`. It retrieves the affordance node, checks if it has a parent, and updates the exit door ID node with the connected room name.",
            "params": [],
            "returns": null,
            "name": "crossed",
            "location": {
              "start": 264,
              "insert": 266,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "b038074f-0d1d-37bb-7949-1863b4f1a32a",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Determines if there are any rooms other than the current room that the worker is in, and if so, sets the enter room node ID and inserts an edge to it. It then sets the state to \"initializing doors\" and prints a message.",
            "params": [],
            "returns": null,
            "name": "initializing_room",
            "location": {
              "start": 284,
              "insert": 287,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "40ac65e2-76b8-2b98-194e-80c545d8fd7a",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "In the `SpecificWorker` class is responsible for handling the scenario where the robot needs to move to another room through a door, and there is no direct path from the current room to the desired room. It traverses the graph to find the shortest path to the desired room, updates the node's parent attribute, and inserts a new edge in the graph to connect the robot to the desired room.",
            "params": [],
            "returns": null,
            "name": "known_room",
            "location": {
              "start": 298,
              "insert": 300,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 73,
            "docLength": null
          },
          {
            "id": "97fb42e6-e393-a18f-0d40-f962134e20f1",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Identifies the doors connected to the current room and updates their attributes with the names of the rooms they lead to, also associating them through a pair of tuples.",
            "params": [],
            "returns": null,
            "name": "initializing_doors",
            "location": {
              "start": 392,
              "insert": 394,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "169b50a4-d8c6-22be-b548-e904c2d484da",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Connects two doors in a graph by adding an edge between their nodes and updating the \"other side door name\" and \"connected room name\" attributes of each door node.",
            "params": [
              {
                "name": "door_1",
                "type_name": "igraphNode",
                "description": "A reference to one of the doors in the graph, which is used to establish a connection between two rooms."
              },
              {
                "name": "door_2",
                "type_name": "str",
                "description": "2-dimensional list containing the name of the door and its room information."
              }
            ],
            "returns": null,
            "name": "associate_doors",
            "location": {
              "start": 431,
              "insert": 433,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "7dba6d19-0ac9-11a8-5f4d-7ab151351297",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Stores the graph data in a file called \"graph.pkl\" when a room node is found in the igraph data structure.",
            "params": [],
            "returns": null,
            "name": "store_graph",
            "location": {
              "start": 450,
              "insert": 451,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "6003f927-ac68-b2ba-564e-ba42175519a0",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Removes edges and nodes from the graph based on certain room numbers, updates the long-term graph, and changes the state to \"idle\".",
            "params": [],
            "returns": null,
            "name": "removing",
            "location": {
              "start": 464,
              "insert": 466,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "1ab47154-ba0f-2487-4144-57a467c74f40",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Within the SpecificWorker class recursively traverses the graph by following RT edges from the starting node until reaching the robot's ID or a maximum depth limit is reached. It inserts vertices and edges into an igraph handle for each iteration.",
            "params": [
              {
                "name": "node_id",
                "type_name": "int",
                "description": "The unique identifier of the node to be traversed."
              }
            ],
            "returns": null,
            "name": "traverse_graph",
            "location": {
              "start": 490,
              "insert": 492,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "9941450b-8dc1-aaac-2849-a5d941339841",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Navigates through the graph by starting at a given vertex, identifying its successors, and inserting vertices and edges to preserve the DSR property of the graph. It then recursively traverses the successor vertices until no more updates are needed.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphVertex",
                "description": "Representing an existing vertex in the graph."
              }
            ],
            "returns": null,
            "name": "traverse_igraph",
            "location": {
              "start": 500,
              "insert": 501,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "225fa64e-4fe1-6387-0640-047b650806c6",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Adds a new vertex to an igraph graph, handling various attributes and edges based on their types and values.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphNode",
                "description": "Passed to insert a new vertex into an existing graph."
              }
            ],
            "returns": null,
            "name": "insert_igraph_vertex",
            "location": {
              "start": 513,
              "insert": 514,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "776dd3e6-e846-cd8c-9b46-91072201c62e",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Inserts a new node into a graph, updating the node's attributes and parent relationship.",
            "params": [
              {
                "name": "parent_name",
                "type_name": "str",
                "description": "Required, which refers to the name of a vertex in the graph that will serve as the parent for the new node being inserted."
              },
              {
                "name": "node",
                "type_name": "Node",
                "description": "Passed as an instance of the Node class representing a vertex to be inserted into the graph."
              }
            ],
            "returns": null,
            "name": "insert_dsr_vertex",
            "location": {
              "start": 548,
              "insert": 550,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "cb8df5c5-bbfa-d99a-604f-44caea2e4e59",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Adds an edge to an igraph object, specifying the origin and destination nodes, as well as the rotation and translation values.",
            "params": [
              {
                "name": "edge",
                "type_name": "igraphEdge",
                "description": "Passed as a whole object, containing attributes such as origin, destination, rt translation, and rotation euler xyz."
              }
            ],
            "returns": null,
            "name": "insert_igraph_edge",
            "location": {
              "start": 562,
              "insert": 565,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "c9505cbd-5885-1895-b749-53af73e7aa35",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Modifies an existing edge in a graph by adding new attributes representing RT translation and rotation, and then inserts or assigns the updated edge to the graph.",
            "params": [
              {
                "name": "org",
                "type_name": "Agent",
                "description": "Either None or an existing node object in the graph, representing the source node of the edge to be inserted."
              },
              {
                "name": "dest",
                "type_name": "Agent",
                "description": "Used to specify the target node in the graph for the new edge."
              }
            ],
            "returns": null,
            "name": "insert_dsr_edge",
            "location": {
              "start": 574,
              "insert": 577,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "bd3d9b86-fbfb-58a0-f047-f251b71e65aa",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Clears the axis, layouts the graph using the Kamada-Kawai algorithm, and then plots the vertices and edges with labels and arrows. It also displays node names.",
            "params": [],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 604,
              "insert": 605,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "1c5969a2-d7a8-9fb8-154b-05151508cdac",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Determines the room number associated with a given node ID and returns it if found, or -1 otherwise.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Passed as an argument to the function, representing the ID of a node in the graph."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "The room ID of a given node or -1 if an error occurs when trying to retrieve the room ID."
            },
            "name": "check_element_room_number",
            "location": {
              "start": 629,
              "insert": 630,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "8e705cf8-c7fa-4f9f-854a-5426294aa78f",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Within the SpecificWorker class determines an element's level based on an attribute value and returns that value if found, or -1 if not.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Used to identify the node whose element level will be checked."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "Element level of a node."
            },
            "name": "check_element_level",
            "location": {
              "start": 638,
              "insert": 639,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "8f9ba2ca-0a1e-0386-d74e-d1179313cade",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Generates an image of a room based on its node ID, retrieves and prints the attributes of the room node, and draws the room polygon and doors.",
            "params": [
              {
                "name": "room_node_id",
                "type_name": "str",
                "description": "Used to retrieve a Node object representing the room node for which a picture should be generated."
              }
            ],
            "returns": null,
            "name": "generate_room_picture",
            "location": {
              "start": 681,
              "insert": 683,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "097b5487-3516-2698-aa47-fa49c84dc627",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Inserts or assigns an edge into the graph, with the `room_id` as the tail id and the `self.agent_id` as the head id.",
            "params": [
              {
                "name": "room_id",
                "type_name": "str",
                "description": "A unique identifier for a particular room."
              }
            ],
            "returns": null,
            "name": "insert_current_edge",
            "location": {
              "start": 716,
              "insert": 718,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "07b3bda5-b24d-fa91-524d-c53e1ada98da",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Updates an affordance node's state based on its active ID, printing various attributes and changing the node's state to \"crossed\" if it is completed and not active.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to identify the node for which the affordance state should be updated."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to identify the node's type."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 730,
              "insert": 731,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "67cdf7cd-b880-0684-484f-a4a4089a786b",
            "ancestors": [
              "0a067d35-4dda-36b4-5c41-7f6586689420"
            ],
            "description": "Updates an edge in the graph based on the type and values of its arguments. If there is no current edge with the specified type, it inserts a new edge and sets it as the current one.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Used to represent the ID of the current room door node that the function operates on."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "The ID of the target node to which the edge is to be updated."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to specify the type of edge to be updated, which can be either \"RT\" or \"current\"."
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 745,
              "insert": 749,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  }
]