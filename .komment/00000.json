[
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/src/long_term_graph.py",
    "content": {
      "structured": {
        "description": "A class RoomReconstructionPlotter and uses it to plot a metric map, including rooms and doors, based on a graph representation of a building. It utilizes various functions from the scipy library for geometric calculations and the matplotlib library for plotting. The code first loads a building graph from a text file, then calculates the room corners and their object coordinates in the room frame using recursive functions get_room_corners_recursive and get_room_objects_coordinates. Finally, it draws the rooms and doors on a matplotlib figure using annotate and arrow functions.",
        "items": [
          {
            "id": "4b9ea1e4-30c5-c68b-774f-774fe4b224b6",
            "ancestors": [],
            "description": "Draws a long-term graph representation of a building's layout and room usage, allowing for interactive exploration and analysis of the data. It provides methods to draw the graph, add points, and display room names and door connections.",
            "attributes": [
              {
                "name": "g",
                "type_name": "instance",
                "description": "Used to specify the color scheme for the graph, where `'r'` represents red, `'b'` represents blue, and `-` represents gray."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a file specified by the user."
              },
              {
                "name": "fig",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to store the figure object that represents the graph."
              },
              {
                "name": "ax",
                "type_name": "matplotlibaxesAxes",
                "description": "Used to interact with a specific axis object in a figure. It provides methods for adding plots, annotations, and other visual elements to the axis."
              },
              {
                "name": "fig_2",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to store the figure object for the metric reconstruction plot."
              },
              {
                "name": "ax_2",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to represent the second plot, which shows the metric reconstruction."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 269,
            "docLength": null
          },
          {
            "id": "77430e1d-d7e6-50b3-8b46-4c2cab75420d",
            "ancestors": [
              "4b9ea1e4-30c5-c68b-774f-774fe4b224b6"
            ],
            "description": "Reads a graph from a file, creates two subplots for visualization, and sets up the x-axis and y-axis labels.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the path to a GraphML file from which the graph structure is read."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "81650769-f298-6a87-d146-f6ccf1580992",
            "ancestors": [
              "4b9ea1e4-30c5-c68b-774f-774fe4b224b6"
            ],
            "description": "Generates a graph representation of a long-term state machine (LTSM) based on its adjacency matrix. It creates the graph layout, defines edge colors, and adds node and edge labels.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter nodes based on their type. It restricts the subgraph to only include nodes labeled as \"room\"."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 253,
              "insert": 254,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/g2o_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and provides a kill signal for shutting down the worker. The code also sets up an ice slice and imports a RoboCompCommonBehavior module. Additionally, the code creates a Ui_guiDlg class and initializes a timer to call a method every 30 milliseconds.",
        "items": [
          {
            "id": "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8",
            "ancestors": [],
            "description": "Manages a worker process with a periodic timer and provides a signal for termination. It also has a method to set the period of the timer.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreSignal",
                "description": "Used to emit a signal when the object needs to be killed."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to initialize and access the user interface of the widget."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect access to the internal state of the worker object, particularly the timer and kill signal."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "30 milliseconds by default, which represents the time interval for the timer to run."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `killYourSelf` slot after a specified period of time."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "795c292f-f253-f1aa-a748-23953c9013be",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Initializes an instance of the `GenericWorker` class, setting up a GUI dialog and creating a mutex for managing access to the timer. It also sets the period of the timer to 30 seconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as an argument for the setupUi method."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "ea51cd3f-4286-88a2-5c4e-a765280c1202",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Emits the `kill` signal, indicating that the instance should be destroyed.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "20082581-a4f0-66af-9a45-78e2e70b070f",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Updates the `Period` attribute and starts a timer with the new period value using the `timer.start()` method.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/g2o_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An object `Odometry` that handles updating a graph and nodes within it based on various events such as node creations, deletions, updates, and edges updates. It also manages a queue for odometry data and has methods to update and delete nodes and edges based on their types. The code uses the `networkx` package for working with graphs.",
        "items": [
          {
            "id": "db065633-a20c-b4a3-b546-23abf1d410fe",
            "ancestors": [],
            "description": "Manages a graph, updates node attributes, and sets edges based on robot odometry data and room changes. It also handles RT edge tracking and stores translation and rotation values for later use.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "instance",
                "description": "Used to control the update rate of the graph. It sets the time interval between successive updates in milliseconds, which can be used to optimize the performance of the worker."
              },
              {
                "name": "agent_id",
                "type_name": "int",
                "description": "Used to identify the agent that owns the robot. It is used to determine which agent's graph should be updated when a new edge is added or an existing edge is modified."
              },
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used for representing the robot's environment through a graph, with nodes representing rooms and edges representing the movement of the robot between them."
              },
              {
                "name": "startup_check",
                "type_name": "QTimersingleShot",
                "description": "Used to check if the user wants to quit the application after a certain period of time has passed since the last update. It schedules a single shot event every 200 milliseconds to check if the user wants to quit."
              },
              {
                "name": "rt_api",
                "type_name": "instance",
                "description": "Used to store information related to the RT (Real-time) module, such as the last time it was accessed and the translation and rotation values set for the current room."
              },
              {
                "name": "inner_api",
                "type_name": "instance",
                "description": "A method that updates the graph with new nodes, edges, or attributes based on the inner loop of the worker."
              },
              {
                "name": "odometry_node_id",
                "type_name": "int",
                "description": "Used to store the ID of the node representing the robot's position in the graph."
              },
              {
                "name": "odometry_queue",
                "type_name": "list",
                "description": "Used to store the current odometry data of the robot, including its advance speed, side speed, and angular speed, which are updated at a rate of 200 Hz."
              },
              {
                "name": "last_odometry",
                "type_name": "int",
                "description": "Used to store the time at which the worker last received odometry data from the environment. It is updated every time a new odometry message is received, allowing the worker to determine how long ago it received the message."
              },
              {
                "name": "g2o",
                "type_name": "Graph",
                "description": "Used to store the graph data of the environment. It contains the nodes, edges, and attributes of the graph."
              },
              {
                "name": "odometry_noise_std_dev",
                "type_name": "floatingpoint",
                "description": "Used to specify the standard deviation of noise added to the odometry measurements for training purposes."
              },
              {
                "name": "odometry_noise_angle_std_dev",
                "type_name": "float",
                "description": "0.1 by default, representing the standard deviation of the noise added to the robot's angle readings during odometry estimation."
              },
              {
                "name": "measurement_noise_std_dev",
                "type_name": "float",
                "description": "0.1 by default, representing the standard deviation of measurement noise for the robot's sensors. It determines how much noise is added to the measured positions and orientations of the robot in the simulation."
              },
              {
                "name": "last_room_id",
                "type_name": "int",
                "description": "Used to store the last room ID seen by the worker before changing rooms."
              },
              {
                "name": "actual_room_id",
                "type_name": "int",
                "description": "Used to store the current room ID of the agent during navigation."
              },
              {
                "name": "elapsed",
                "type_name": "int",
                "description": "Used to keep track of the time elapsed since the last call to the `startup_check()` function, which is used to check if the application should be closed after a certain period of inactivity."
              },
              {
                "name": "room_initialized",
                "type_name": "bool",
                "description": "Used to track whether the current room has been initialized or not, it's set to False when a new room is entered and True otherwise."
              },
              {
                "name": "iterations",
                "type_name": "int",
                "description": "0-indexed, indicating the number of iterations of the worker's tasks it can perform before finishing."
              },
              {
                "name": "hide",
                "type_name": "str",
                "description": "Used to determine whether a node or edge should be hidden from the graph. It allows you to specify which nodes or edges to hide based on their ID, label, or other attributes."
              },
              {
                "name": "init_graph",
                "type_name": "instance",
                "description": "Used to keep track of whether the graph has been initialized or not, it's set to `True` when the graph is first created and `False` otherwise."
              },
              {
                "name": "current_edge_set",
                "type_name": "bool",
                "description": "Used to track whether the current edge being processed is part of the RT set or not."
              },
              {
                "name": "first_rt_set",
                "type_name": "bool",
                "description": "Set to True when a new RT (remote transmission) set is encountered for the first time during the simulation, indicating that the worker has entered a new room or area."
              },
              {
                "name": "translation_to_set",
                "type_name": "3D",
                "description": "Used to store the translation of a robot's end effector when it enters a specific set. It is used in conjunction with the \n`rotation_to_set` attribute to determine the full pose of the robot when it enters the set."
              },
              {
                "name": "rotation_to_set",
                "type_name": "3D",
                "description": "Used to store the rotation of the robot relative to its set position."
              },
              {
                "name": "room_polygon",
                "type_name": "QPolygon",
                "description": "Used to store the polygon representation of a room in the environment."
              },
              {
                "name": "security_polygon",
                "type_name": "QPolygon",
                "description": "Used to store the security polygon of a specific worker in a graph, which is used for collision detection and response in robotics."
              },
              {
                "name": "initialize_g2o_graph",
                "type_name": "instance",
                "description": "Used to create a Graph2O graph from a robot's observation, which is then used for optimization. It initializes the graph by adding nodes and edges based on the robot's observation and sets up the necessary attributes for optimization."
              },
              {
                "name": "rt_set_last_time",
                "type_name": "int",
                "description": "Used to track the time since the last RT set was received for a given agent ID. It is used in the `update_edge()` function to determine if enough time has passed since the last RT set for the robot to consider setting a new translation and rotation."
              },
              {
                "name": "rt_time_min",
                "type_name": "float",
                "description": "Set to the minimum time interval between two RT sets that are considered as a new RT set. It is used to determine when to reset the translation and rotation to set values in the `update_edge()` method."
              },
              {
                "name": "last_update_with_corners",
                "type_name": "int",
                "description": "Used to keep track of when the worker last updated its graph with corners. It is set to the current time whenever the `update_node`, `update_edge`, or `delete_edge` methods are called, and is used to determine when the graph has changed significantly enough to warrant updating the robot's state."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `QApplication.instance().quit()` function after 200 milliseconds, which means that the worker will quit after a certain amount of time has passed."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "Used to handle updates for node attributes. It takes two arguments: `id` which is the id of the node to be updated, and `attribute_names` which is a list of strings representing the names of the attributes to be updated."
              },
              {
                "name": "update_node_att",
                "type_name": "event",
                "description": "Called when a new node attribution is received from the graph. It updates the robot's odometry queue with the current advance, side, and angular speed and sets the `room_initialized` flag to false if the room ID changes."
              },
              {
                "name": "update_edge",
                "type_name": "update_edge",
                "description": "Used to update the attributes of an edge in a graph based on its type, such as \"current\" or \"RT\". It sets the translation and rotation of the robot based on the RT set."
              },
              {
                "name": "update_edge_att",
                "type_name": "str",
                "description": "Defined as a method that updates the attributes of an edge in the graph based on a specific edge type and a list of attribute names."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 416,
            "docLength": null
          },
          {
            "id": "736bb328-b4ca-7b8b-5e4f-cb66525a0d81",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Initializes a SpecificWorker object, setting its properties and connecting to signals for updating node attributes, edges, and edge attributes.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to specify a mapping from real-world coordinates to virtual coordinates for the robot's movement."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to run an initialization check on the graph when the agent starts up."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 51,
              "insert": 52,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 54,
            "docLength": null
          },
          {
            "id": "6c6431d9-1393-d3b9-5b46-3847c0c49dcb",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "In the `SpecificWorker` class implements a robot's movement using ROS navigation stack, computing the robot's position and orientation based on the previous odometry data and adding it to the graph.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 123,
              "insert": 125,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 96,
            "docLength": null
          },
          {
            "id": "1f7b5f1f-be86-5eb8-b24b-1aac542cd83a",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Initializes a Graph2Online (G2O) graph for a specific robot's odometry data, by adding nominal corners and fixed poses to the graph based on room and door nodes in the environment map.",
            "params": [],
            "returns": {
              "type_name": "bool",
              "description": "1 if the function was able to initialize the g2o graph successfully, and 0 otherwise."
            },
            "name": "initialize_g2o_graph",
            "location": {
              "start": 247,
              "insert": 250,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 115,
            "docLength": null
          },
          {
            "id": "fb17fb15-9dd2-2aac-e149-6ea477cc49e5",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Calculates the displacement of an agent based on its odometry data, taking into account advancement, lateral movement, and angular movement.",
            "params": [
              {
                "name": "odometry",
                "type_name": "dict",
                "description": "Passed as an argument to the function, containing the odometric data of the vehicle at each time step, including the position, velocity, and timestamp."
              }
            ],
            "returns": {
              "type_name": "3element",
              "description": "3-D vector representing the displacement of a robot's end effector in terms of lateral, forward, and angular displacements."
            },
            "name": "get_displacement",
            "location": {
              "start": 452,
              "insert": 453,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "3a44433e-c164-0bb0-a048-743c75fa20f0",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Computes the covariance matrix of a set of vertices in a graph, using the gradient descent optimizer from the `g2o` library. It returns the computed covariance matrix and whether it was successfully computed or not.",
            "params": [
              {
                "name": "vertex",
                "type_name": "g2overtex",
                "description": "Used to represent a specific vertex in a graph."
              }
            ],
            "returns": {
              "type_name": "tuple",
              "description": "2-element tuple containing two values: (`covariances_result`, `covariances`)."
            },
            "name": "get_covariance_matrix",
            "location": {
              "start": 471,
              "insert": 472,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "889d2404-a66a-f3b6-8e47-4705c72d6823",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Visualizes the 3D positions of vertices and edges in a G2O file in real-time, using matplotlib. It loads the G2O file, calculates the positions of the vertices and edges, and plots them on a 3D scatter plot.",
            "params": [
              {
                "name": "optimizer",
                "type_name": "instance",
                "description": "Used to store an instance of the G2O optimizer class, which is responsible for minimizing the energy of the system."
              }
            ],
            "returns": null,
            "name": "visualize_g2o_realtime",
            "location": {
              "start": 484,
              "insert": 485,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "dade48c4-b3b7-33be-694f-984e420abf6c",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Updates the attributes of a specific node in a graph, based on the current time and other factors.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to represent the unique identifier of the node being updated, specifically the odometry node ID."
              },
              {
                "name": "attribute_names",
                "type_name": "[str]",
                "description": "An array of names of attributes to be updated on the node."
              }
            ],
            "returns": null,
            "name": "update_node_att",
            "location": {
              "start": 521,
              "insert": 530,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "ae1da25f-ceee-21ae-874c-7905cb623444",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Updates an unspecified node with an ID and a type. If the type is \"corner\", it initializes a room graph if necessary. Otherwise, it does nothing.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to represent the unique identifier for the node being updated."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Defined as \"corner\"."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 537,
              "insert": 547,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "8497841c-0cf0-3ca6-7a4c-1ada9b487ccd",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Deletes a node from a data structure managed by a `SpecificWorker` subclass of `GenericWorker`.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to identify the node to be deleted."
              }
            ],
            "returns": null,
            "name": "delete_node",
            "location": {
              "start": 549,
              "insert": 550,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "f9896a12-dfdf-789b-f14f-bdb730087303",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Updates the room ID and sets the `current_edge_set` attribute based on the type of edge received, and also performs RT translation and rotation if necessary.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Representative of the starting vertex of an edge in a graph."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Used to represent the ID of the next node in the graph that the edge will be attached to."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to indicate the type of edge being updated, either \"current\" or \"RT\"."
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 558,
              "insert": 559,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "338c7aa8-6757-9cbe-9845-75ded7f5c60a",
            "ancestors": [
              "db065633-a20c-b4a3-b546-23abf1d410fe"
            ],
            "description": "Deletes an edge from a graph, specified by its ID and type.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Passed as an argument to the function with the value of 123."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Used to specify the target vertex ID for edge deletion."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to specify the edge type to be deleted, which can be either 'weighted' or 'unweighted'."
              }
            ],
            "returns": null,
            "name": "delete_edge",
            "location": {
              "start": 586,
              "insert": 587,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/long_term_graph.py",
    "content": {
      "structured": {
        "description": "a function called draw_metric_map that takes in a metric map object and plots the map using Matplotlib. It first loads the graph from a text file and defines various functions to work with the graph, such as get_room_corners, get_room_objects, and get_room_objects_coordinates. These functions recursively traverse the graph to find the corners or objects in a room, respectively. The draw_metric_map function then uses these functions to plot the rooms and objects in the map. Specifically, it plots each room as a rectangle and adds names to each room, and it plots each object as a point and adds a text label with its name.",
        "items": [
          {
            "id": "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8",
            "ancestors": [],
            "description": "Draws a graph of long-term spatial mobility data using PyQt and Matplotlib. It provides methods to visualize rooms, doors, walls, and edges in the graph.",
            "attributes": [
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to represent the graph object that contains the rooms, doors, and walls to be visualized."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a file specified by the user. It takes a string path as input and reads the graph data from it."
              },
              {
                "name": "fig",
                "type_name": "instance",
                "description": "A reference to the figure object that will be used to draw the graph."
              },
              {
                "name": "ax",
                "type_name": "MatplotlibFigure",
                "description": "Used to represent the axis object for the graph. It provides methods for adding patches, lines, and other visual elements to the graph."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 198,
            "docLength": null
          },
          {
            "id": "411ae665-2c3f-efb9-7546-d76e93280634",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Initializes an object of `LongTermGraph` class, loading a graph from a file using the `read_graph` method and displaying its summary.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the name of a file containing a graph represented as an adjacency matrix."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "fbfe681a-6ac8-9cb2-ad48-9c2d64fec643",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Generates a graphical representation of a subgraph within a larger graph, based on node and edge properties. It creates a figure and axis object, sets the title, and draws the nodes and edges using different colors for each type of node or edge.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter the nodes in the graph based on their types, only showing rooms and doors."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 191,
              "insert": 192,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 34,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/main.py",
    "content": {
      "structured": {
        "description": "Three functions: draw_graph, find_edge_with_attribute, and get_connected_door_nodes. The draw_graph function takes a graph object as input and uses PySide2's QtCore module to create a subplot and plot points on the graph. The find_edge_with_attribute function searches for an edge in a given graph based on a specific attribute, and the get_connected_door_nodes function recursively traverses a graph to find all connected door nodes in a given room. The code also loads a graph from a pickled file using the LongTermGraph class, and uses the compute_metric_map and draw_metric_map functions to display the graph's metric map and point locations.",
        "items": [
          {
            "id": "d3824e62-3401-2c9e-394e-2ee9ee755e69",
            "ancestors": [],
            "description": "Generates a graph based on a provided adjacency matrix using Kamada-Kawai layout algorithm, and adds node names and edges with arrowheads.",
            "params": [
              {
                "name": "graph",
                "type_name": "AbstractGraph",
                "description": "Used to represent a graph object that contains vertices and edges."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 6,
              "insert": 7,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "d7906eb3-709a-3c95-7c40-18ce0ab8dcfd",
            "ancestors": [],
            "description": "Searches through a graph's edges for an edge with a specific attribute equal to a given value. If such an edge is found, it returns it; otherwise, it returns `None`.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as an object that contains a collection of edges, where each edge represents a connection between two nodes in the graph."
              },
              {
                "name": "attribute",
                "type_name": "attribute",
                "description": "Used to specify the attribute of interest for finding an edge in a graph."
              },
              {
                "name": "value",
                "type_name": "object",
                "description": "Used to search for an edge in a graph based on a specific attribute."
              }
            ],
            "returns": {
              "type_name": "edge",
              "description": "An untyped reference to a graph edge that has the specified attribute equal to the provided value."
            },
            "name": "find_edge_with_attribute",
            "location": {
              "start": 41,
              "insert": 42,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          },
          {
            "id": "fe2cae8a-54a8-32a7-014a-24ebf3a8e0f2",
            "ancestors": [],
            "description": "Iterates over the edges in a graph and adds to an output list any edge connecting nodes with \"door\" in their names.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as g, which contains a collection of nodes and edges that define a graph structure."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of edges from the given graph."
            },
            "name": "get_room_edges",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e9acd19c-513f-f78e-4949-cd353d1b9b16",
            "ancestors": [],
            "description": "In Java code recursively queries the graph for all nodes connected to a given node via doors, returning a list of such nodes.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph structure."
              },
              {
                "name": "node",
                "type_name": "GraphNode",
                "description": "Referred to as a node in the graph."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of nodes that are connected to a specific node through doors."
            },
            "name": "get_connected_door_nodes",
            "location": {
              "start": 58,
              "insert": 60,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "9a2a2e72-8415-229d-6c4a-657476ccda61",
            "ancestors": [],
            "description": "Navigates through a graph by starting from a given room and visiting all other rooms reachable through doors. It keeps track of visited rooms using a list and prints information about each room it visits.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph with nodes and edges."
              },
              {
                "name": "current_room",
                "type_name": "dict",
                "description": "Represents the current room to be traversed in the graph."
              },
              {
                "name": "visited",
                "type_name": "list",
                "description": "Used to keep track of the rooms that have been visited during the traversal process, initialized to an empty list if None."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of strings representing the rooms that have been visited."
            },
            "name": "traverse_graph",
            "location": {
              "start": 74,
              "insert": 75,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and implements a timer-based mechanism for killing itself after a specified period. It also provides a signal kill to allow for handling of the termination from outside the worker. The code uses PySide2, Ice, and the RoboCompCommonBehavior module.",
        "items": [
          {
            "id": "8a50128c-009f-a1ac-2c45-674f0e62438e",
            "ancestors": [],
            "description": "Manages a timer and a signal to stop its own execution. It has methods to change the timer period and to emit the signal to stop itself.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreQObjectSlot",
                "description": "Used to emit a signal that can be caught by any connected slots to stop the worker's execution."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to setup the user interface of the class."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect the worker's state from concurrent access."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "Used to set the time interval for the timer signal emitted by the `setPeriod()` method, which changes its value on each call."
              },
              {
                "name": "timer",
                "type_name": "QtCoreQTimer",
                "description": "Used to start a timer that emits the `kill` signal after a specified period."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "dc756aa5-ebc6-5490-d649-854bb2ac26a4",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Initializes an object of the `GenericWorker` class, setting up a UI widget, creating a mutex for synchronization, and defining a timer with a period of 500 milliseconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as the parent widget for the GenericWorker object's UI."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "17fccd3d-bcc7-a9a3-5f45-73125f7d1f78",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Emits the `kill` signal, indicating that the object should be terminated.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "a2ebb705-7932-fb9b-3e45-f965c61ebf4d",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Sets the period of a timer and updates the internal variable `Period`.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a class `Room` that represents a room in a graphical user interface (GUI) and performs various operations on it. The class has several methods:\n\n* `insert_room_node`: Inserts a new room node into the graph.\n* `update_edge`: Updates an edge in the graph, setting its type to \"current\" if necessary.\n* `delete_node`: Deletes a room node from the graph.\n* `update_edge_att`: Updates an edge attribute in the graph.\n* `delete_edge`: Deletes an edge from the graph.\n\nThe code uses the `igraph` package to interact with the graph, and the `pickle` package for serializing and deserializing the graph. The class also has some console print statements to display messages during execution.",
        "items": [
          {
            "id": "d14b1fa8-9d9a-61a7-184c-3f4e98189154",
            "ancestors": [],
            "description": "Manages a graph representing a robot's movement and interactions with its environment, performing various operations such as inserting, updating, and deleting nodes and edges, as well as tracking the robot's state.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "str",
                "description": "Used to store the current time period in which the worker is active, allowing for more efficient handling of tasks during different time slots."
              },
              {
                "name": "agent_id",
                "type_name": "int",
                "description": "Used as the ID of the agent that owns or manipulates the graph, which could be a robot or a human operator."
              },
              {
                "name": "g",
                "type_name": "igraphGraph",
                "description": "Used for manipulating the graph in various methods like `insert_igraph_vertex`, `insert_igraph_edge`, etc."
              },
              {
                "name": "update_node",
                "type_name": "int",
                "description": "Used to update a node's attributes based on its ID. It takes two arguments: `id` (int) and `type` (str), where `id` is the node's ID to be updated and `type` represents the type of update (e.g., \"door\", \"room\")."
              },
              {
                "name": "update_edge",
                "type_name": "int",
                "description": "Used to update the edge of a robot moving from one node to another with a certain type (current) when there is no current edge and a room node exists."
              },
              {
                "name": "startup_check",
                "type_name": "str",
                "description": "Used to check if the worker is in startup mode or not. It is set to \"true\" when the worker starts up and \"false\" otherwise."
              },
              {
                "name": "rt_api",
                "type_name": "str",
                "description": "Represented as a string value indicating which RT (Real-Time) affordance to use."
              },
              {
                "name": "inner_api",
                "type_name": "instance",
                "description": "A Python method that returns the inner API of the worker. It is used to define the functionality of the worker and its interactions with other components of the system."
              },
              {
                "name": "robot_name",
                "type_name": "str",
                "description": "Used to store the name of the robot being controlled by the worker."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "Used to identify the robot node in the graph."
              },
              {
                "name": "last_robot_pose",
                "type_name": "IGraph",
                "description": "Used to store the last known pose of the robot, which can be used for debugging purposes or to track the robot's movement."
              },
              {
                "name": "robot_exit_pose",
                "type_name": "RT",
                "description": "A dictionary containing the pose (position and orientation) of the robot when it exits the room through the door."
              },
              {
                "name": "state",
                "type_name": "str",
                "description": "Used to store the current state of the worker, which can be either \"idle\", \"working\", or \"crossed\"."
              },
              {
                "name": "affordance_node_active_id",
                "type_name": "int",
                "description": "Used to store the ID of the affordance node that is currently active. It is used to check if the affordance node is completed and not active, and to switch to the crossed state when it is completed and not active."
              },
              {
                "name": "exit_door_id",
                "type_name": "int",
                "description": "1234, which represents the ID of the door node that serves as the exit of a room."
              },
              {
                "name": "room_exit_door_id",
                "type_name": "int",
                "description": "Used to represent the ID of the door node that leads from a room to the outside world in the graph."
              },
              {
                "name": "enter_room_node_id",
                "type_name": "int",
                "description": "0 by default, representing the ID of the room node that the worker enters when it completes its task."
              },
              {
                "name": "graph",
                "type_name": "igraphGraph",
                "description": "Used for storing and manipulating the graph represented by the worker. It contains the nodes, edges, and other attributes of the graph."
              },
              {
                "name": "vertex_size",
                "type_name": "int",
                "description": "Used to store the size of the vertex (node) in the graph, indicating the number of attributes associated with each node."
              },
              {
                "name": "not_required_attrs",
                "type_name": "list",
                "description": "Used to keep track of a list of attributes that are not required for the worker's functionality, but can be useful for debugging or other purposes."
              },
              {
                "name": "long_term_graph",
                "type_name": "igraphGraph",
                "description": "Used for storing the long-term graph of the environment, which is updated when certain events occur like inserting or deleting nodes."
              },
              {
                "name": "global_map",
                "type_name": "igraphGraph",
                "description": "Used to store the global map of the environment, which is a graph representation of the environment that includes all nodes and edges."
              },
              {
                "name": "insert_current_edge",
                "type_name": "igraphEdge",
                "description": "Used to insert a new edge into the graph with the given source and target nodes, and the specified edge type."
              },
              {
                "name": "timer",
                "type_name": "int",
                "description": "Set to the number of milliseconds since the epoch (January 1, 1970, 00:00:00 UTC) when the worker was created. It is used to track the elapsed time for the worker's tasks."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "Used to compute the shortest path between two nodes in the graph based on the RT model."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 49,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 572,
            "docLength": null
          },
          {
            "id": "768be6cd-7a26-04b8-5c48-d827e00b1c97",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Initializes an instance of the SpecificWorker class, setting up graph connections and variables for storing information about a robot's environment and state.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "igraphGraph",
                "description": "Used to represent the graph mapping between nodes and objects, allowing for efficient object manipulation."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the agent has already been started."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 46,
            "docLength": null
          },
          {
            "id": "b75c11a0-d78b-c099-0542-820638964df9",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Sets the parameters of an object, then removes a self-edge from a room and stores the ID of an exit door in a variable. It also assigns attributes to both doors in the new room.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Used to store any relevant data or configuration for the function's operation."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True."
            },
            "name": "setParams",
            "location": {
              "start": 116,
              "insert": 117,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "bd530f7b-1d60-7699-5c46-38a9649a60a7",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Determines the current state of a worker and performs the appropriate actions based on that state, including idle, crossing, crossed, initializing room, known room, initializing doors, storing graph, and removing.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 130,
              "insert": 149,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "75ed2888-b3fb-1cbf-ce45-8c960f6d2330",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Performs the following tasks:\n\n1. Identifies active affordance nodes in the short-term graph.\n2. Checks if any \"current\" edge exists in the short-term graph.\n3. If a door is found, computes its pose in the long-term graph and associates it with the current room.",
            "params": [],
            "returns": null,
            "name": "idle",
            "location": {
              "start": 168,
              "insert": 170,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 76,
            "docLength": null
          },
          {
            "id": "09e1943c-c650-459e-6f49-e8c99cf5b03f",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Determines the current room based on an active affordance node and updates the state machine accordingly. If the node has no parent, it sets the exit door ID to the value of the active affordance node's parent attribute.",
            "params": [],
            "returns": null,
            "name": "crossed",
            "location": {
              "start": 269,
              "insert": 271,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "d5bde5e7-2579-51a6-ca41-9f515472bf25",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "1) identifies room nodes in the graph, 2) sets the `enter_room_node_id` field, and 3) enters the \"initializing doors\" state.",
            "params": [],
            "returns": null,
            "name": "initializing_room",
            "location": {
              "start": 289,
              "insert": 292,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "0abb8428-4ef9-1099-494a-164dd3beb89f",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Within the `SpecificWorker` class defines how a robot navigates through a graph representation of a maze to reach an objective room while avoiding obstacles and taking into account the associated door's rotation.",
            "params": [],
            "returns": null,
            "name": "known_room",
            "location": {
              "start": 303,
              "insert": 305,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 73,
            "docLength": null
          },
          {
            "id": "11fcaca4-6eb8-0f92-fe46-b59555cb21f2",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Identifies doors connected to a specified exit door and associates them with each other, updating node attributes and the state of the worker.",
            "params": [],
            "returns": null,
            "name": "initializing_doors",
            "location": {
              "start": 397,
              "insert": 399,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "64841fe3-a4e4-5e90-864a-db8fe9332e9f",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Connects two doors in a graph by adding an edge between them and setting their `other_side_door_name` and `connected_room_name` attributes.",
            "params": [
              {
                "name": "door_1",
                "type_name": "str",
                "description": "A string representing the name of the first door to be associated with another door in the graph."
              },
              {
                "name": "door_2",
                "type_name": "str",
                "description": "Represented as an igraph vertex object, which contains information about the door node to be associated with the first door node passed as input."
              }
            ],
            "returns": null,
            "name": "associate_doors",
            "location": {
              "start": 436,
              "insert": 438,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "d14e9d2c-fd3b-9c95-d54d-82acccfc7009",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Within SpecificWorker, a subclass of GenericWorker, stores a graph representation of a room and its exits in a file called \"graph.pkl\".",
            "params": [],
            "returns": null,
            "name": "store_graph",
            "location": {
              "start": 455,
              "insert": 456,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "b4c71ece-c0c2-6f93-814a-f62b2e37eac0",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Removes edges from the graph that connect nodes representing rooms, based on their room numbers. It first identifies edges with room numbers matching those of the current room, then deletes them and updates a dictionary for future reference. Finally, it draws the updated graph and sets the state to \"idle\".",
            "params": [],
            "returns": null,
            "name": "removing",
            "location": {
              "start": 469,
              "insert": 471,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "8162c2ce-cb2a-1689-a149-3b886804fd98",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Traverses a graph, starting from a given node, and performs a specific operation (in this case, inserting vertices and edges) on the nodes and edges it encounters.",
            "params": [
              {
                "name": "node_id",
                "type_name": "int",
                "description": "Used to identify the node that the function operates on."
              }
            ],
            "returns": null,
            "name": "traverse_graph",
            "location": {
              "start": 495,
              "insert": 497,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "de268dea-32ae-40ac-af42-325662be034d",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Traverses the graph, starting from a given node, and inserts vertices and edges into a DSR graph based on certain conditions.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphVertex",
                "description": "Represented by an index in the graph."
              }
            ],
            "returns": null,
            "name": "traverse_igraph",
            "location": {
              "start": 505,
              "insert": 506,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e91753f5-7b0b-869b-e440-6401584da274",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Adds a vertex to an igraph graph and populates its attributes based on the given node's attributes. It also attempts to find an edge connecting the new vertex to another vertex with a matching \"other_side_door_name\" attribute, and adds that edge if found.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphNode",
                "description": "Passed in to add the vertex to the graph."
              }
            ],
            "returns": null,
            "name": "insert_igraph_vertex",
            "location": {
              "start": 518,
              "insert": 519,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "d8e8572a-c8bd-9f80-3041-8a09b43308a2",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Takes in a parent node name and a node object, creates a new node with the appropriate attributes, and inserts it into the graph using the `GenericWorker` class's `insert_node` method.",
            "params": [
              {
                "name": "parent_name",
                "type_name": "str",
                "description": "Used to identify the parent node for the new vertex being inserted."
              },
              {
                "name": "node",
                "type_name": "Node",
                "description": "Represented as a Python dictionary containing the node's attributes and values, such as agent ID, type, and name."
              }
            ],
            "returns": null,
            "name": "insert_dsr_vertex",
            "location": {
              "start": 553,
              "insert": 555,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "b9e4cd38-45f4-25b0-1543-8069bb5dc584",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Modifies an existing graph by adding a new edge between two nodes based on edge attributes.",
            "params": [
              {
                "name": "edge",
                "type_name": "igraphEdge",
                "description": "Passed as an instance of the Edge class, representing an edge in the graph with specified attributes."
              }
            ],
            "returns": null,
            "name": "insert_igraph_edge",
            "location": {
              "start": 567,
              "insert": 568,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "658729f3-ea08-1cab-dd46-c1207d76fc8d",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Modifies an edge in a graph based on input arguments 'org' and 'dest'. It creates a new edge with the appropriate RT value and rotation, and inserts it into the graph.",
            "params": [
              {
                "name": "org",
                "type_name": "Agent",
                "description": "Used to represent the starting node of the edge."
              },
              {
                "name": "dest",
                "type_name": "Agent",
                "description": "Used to represent the destination node of the edge being inserted."
              }
            ],
            "returns": null,
            "name": "insert_dsr_edge",
            "location": {
              "start": 581,
              "insert": 584,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "68515eb1-870c-66a0-e74d-fc58b5dc6b6c",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Draws the graph based on the layout \"kamada_kawai\", plots edges, and displays node names using annotations.",
            "params": [],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 611,
              "insert": 612,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "ffe7cb5a-2c7c-f8ab-fc4a-6a26dd7fd44b",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Within SpecificWorker, a subclass of GenericWorker, retrieves the room ID associated with a given node ID by querying the attribute \"room_id\" and returning its value upon success or -1 on error.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Passed as an argument to the function, representing the unique identifier of a Node in the graph."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "The room ID associated with a given node ID."
            },
            "name": "check_element_room_number",
            "location": {
              "start": 636,
              "insert": 637,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "2288e20d-9011-75bc-464b-b4c8b38be6ad",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Within the `SpecificWorker` class, checks the \"level\" attribute of a specified node in the graph and returns its value. If the attribute is not found, it prints an error message and returns -1.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Used to identify a node in the graph."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "Element level of the node with the given ID"
            },
            "name": "check_element_level",
            "location": {
              "start": 645,
              "insert": 646,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "e14126be-ce12-ec84-1e4f-5b15b353df35",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Within the SpecificWorker class retrieves the room ID of a given node, then checks if there are any RT edges connecting to that node. If such an edge is found, it extracts the translation attribute and prints it. Finally, it draws the room polygon and doors using OpenCV.",
            "params": [
              {
                "name": "room_node_id",
                "type_name": "str",
                "description": "Used to identify the node representing the room for which the picture is being generated."
              }
            ],
            "returns": null,
            "name": "generate_room_picture",
            "location": {
              "start": 688,
              "insert": 690,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "9ac71498-065b-518a-7348-6e9a0a780cff",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Inserts or assigns an edge with specified attributes to the graph represented by the `self.g` attribute, using the `insert_or_assign_edge` method provided by the Graph class.",
            "params": [
              {
                "name": "room_id",
                "type_name": "str",
                "description": "Used to identify the current room of the agent that is performing the action."
              }
            ],
            "returns": null,
            "name": "insert_current_edge",
            "location": {
              "start": 723,
              "insert": 725,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "19662af0-764b-af81-c34a-5d2119ef52c6",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Updates a node's properties based on its type and other considerations, such as checking if a door node has a pre-transition edge, inserting a new vertex or edge in the graph if necessary, and drawing the graph.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to identify the node to be updated."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to determine the action taken on the node based on its name."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 737,
              "insert": 738,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "dadeb4c6-dedc-1490-c447-209f1bc1d73a",
            "ancestors": [
              "d14b1fa8-9d9a-61a7-184c-3f4e98189154"
            ],
            "description": "Updates the current edge of a room node based on certain conditions. If the target node is the robot id, and there are no edges of type \"current\" in the graph, the function inserts the current edge and sets it as current.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Referred to as \"from room\" in the code snippet provided."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "A reference to an integer representing a node ID in the graph."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to indicate the type of edge being updated, specifically \"RT\"."
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 792,
              "insert": 796,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  }
]