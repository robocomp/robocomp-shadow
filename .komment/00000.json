[
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/src/long_term_graph.py",
    "content": {
      "structured": {
        "description": "A class RoomReconstructionPlotter and uses it to plot a metric map, including rooms and doors, based on a graph representation of a building. It utilizes various functions from the scipy library for geometric calculations and the matplotlib library for plotting. The code first loads a building graph from a text file, then calculates the room corners and their object coordinates in the room frame using recursive functions get_room_corners_recursive and get_room_objects_coordinates. Finally, it draws the rooms and doors on a matplotlib figure using annotate and arrow functions.",
        "items": [
          {
            "id": "4b9ea1e4-30c5-c68b-774f-774fe4b224b6",
            "ancestors": [],
            "description": "Draws a long-term graph representation of a building's layout and room usage, allowing for interactive exploration and analysis of the data. It provides methods to draw the graph, add points, and display room names and door connections.",
            "attributes": [
              {
                "name": "g",
                "type_name": "instance",
                "description": "Used to specify the color scheme for the graph, where `'r'` represents red, `'b'` represents blue, and `-` represents gray."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a file specified by the user."
              },
              {
                "name": "fig",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to store the figure object that represents the graph."
              },
              {
                "name": "ax",
                "type_name": "matplotlibaxesAxes",
                "description": "Used to interact with a specific axis object in a figure. It provides methods for adding plots, annotations, and other visual elements to the axis."
              },
              {
                "name": "fig_2",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to store the figure object for the metric reconstruction plot."
              },
              {
                "name": "ax_2",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to represent the second plot, which shows the metric reconstruction."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 269,
            "docLength": null
          },
          {
            "id": "77430e1d-d7e6-50b3-8b46-4c2cab75420d",
            "ancestors": [
              "4b9ea1e4-30c5-c68b-774f-774fe4b224b6"
            ],
            "description": "Reads a graph from a file, creates two subplots for visualization, and sets up the x-axis and y-axis labels.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the path to a GraphML file from which the graph structure is read."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "81650769-f298-6a87-d146-f6ccf1580992",
            "ancestors": [
              "4b9ea1e4-30c5-c68b-774f-774fe4b224b6"
            ],
            "description": "Generates a graph representation of a long-term state machine (LTSM) based on its adjacency matrix. It creates the graph layout, defines edge colors, and adds node and edge labels.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter nodes based on their type. It restricts the subgraph to only include nodes labeled as \"room\"."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 253,
              "insert": 254,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/g2o_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and provides a kill signal for shutting down the worker. The code also sets up an ice slice and imports a RoboCompCommonBehavior module. Additionally, the code creates a Ui_guiDlg class and initializes a timer to call a method every 30 milliseconds.",
        "items": [
          {
            "id": "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8",
            "ancestors": [],
            "description": "Manages a worker process with a periodic timer and provides a signal for termination. It also has a method to set the period of the timer.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreSignal",
                "description": "Used to emit a signal when the object needs to be killed."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to initialize and access the user interface of the widget."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect access to the internal state of the worker object, particularly the timer and kill signal."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "30 milliseconds by default, which represents the time interval for the timer to run."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `killYourSelf` slot after a specified period of time."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "795c292f-f253-f1aa-a748-23953c9013be",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Initializes an instance of the `GenericWorker` class, setting up a GUI dialog and creating a mutex for managing access to the timer. It also sets the period of the timer to 30 seconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as an argument for the setupUi method."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "ea51cd3f-4286-88a2-5c4e-a765280c1202",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Emits the `kill` signal, indicating that the instance should be destroyed.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "20082581-a4f0-66af-9a45-78e2e70b070f",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Updates the `Period` attribute and starts a timer with the new period value using the `timer.start()` method.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/g2o_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class `Robot` that handles robot movement and mapping in a graph-based environment. It uses the `networkx` library for working with graphs and provides functions for updating node attributes, creating new nodes, deleting nodes, and updating edges. The code also includes functionality for handling RT (room transition) events and storing translation and rotation information for future use. Overall, the code is focused on tracking the movement of a robot in a graph-based environment and using that information to make decisions about how to navigate the space.",
        "items": [
          {
            "id": "cedd1d2f-851b-87a9-c542-e4ba389373e2",
            "ancestors": [],
            "description": "Performs specific tasks related to a worker robot's navigation and localization in an unknown environment, such as updating the graph, getting displacement, computing covariance matrix, visualizing G2O real-time, and more.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "float",
                "description": "Used to control the time interval between consecutive calls to the `update_worker` method, which is responsible for updating the robot's state based on the received data. The value of `Period` determines how often the worker will be called, with larger values resulting in slower updates but potentially reducing the load on the system."
              },
              {
                "name": "agent_id",
                "type_name": "int",
                "description": "Used as a unique identifier for the agent's id."
              },
              {
                "name": "g",
                "type_name": "undirected",
                "description": "Used to store the graph representing the environment. It contains nodes and edges that represent the obstacles, walls, and other features of the environment."
              },
              {
                "name": "startup_check",
                "type_name": "QTimersingleShot",
                "description": "Used to check for the application's quit after a certain time interval, which is 200 milliseconds in this case."
              },
              {
                "name": "rt_api",
                "type_name": "str",
                "description": "100% sure to be a valid ROS topic name for receiving real-time data from a robotic arm."
              },
              {
                "name": "inner_api",
                "type_name": "instance",
                "description": "Used to store a reference to the inner API of the worker, which allows for direct communication with the worker's inner workings."
              },
              {
                "name": "odometry_node_id",
                "type_name": "int",
                "description": "Used to identify the node in the graph that corresponds to the robot's odometry information. It is used to store the odometry data in the graph and for visualization purposes."
              },
              {
                "name": "odometry_queue",
                "type_name": "3element",
                "description": "Used to store the odometry information of the robot in a First-In-First-Out (FIFO) queue. It stores the advance, lateral, and angular displacement of the robot at each time step, which are computed using the G2O optimization algorithm."
              },
              {
                "name": "last_odometry",
                "type_name": "3element",
                "description": "Used to store the last known odometry information of the robot, which is used in the computation of the displacement and covariance matrix."
              },
              {
                "name": "g2o",
                "type_name": "Optimizer",
                "description": "Used to store the Gauss-Newton optimizer for graph matching. It is used to compute marginals \nand to update the position of vertices in the graph."
              },
              {
                "name": "visualizer",
                "type_name": "Visualizer",
                "description": "Used to visualize the graph and edges in real-time during the RT algorithm execution. It provides a function to update the visualization and can be used to display the graph and edges in different formats, such as 3D or 2D."
              },
              {
                "name": "odometry_noise_std_dev",
                "type_name": "float",
                "description": "0.1 by default, representing the standard deviation of noise in the odometry measurements. It helps to control the level of random fluctuations in the robot's motion."
              },
              {
                "name": "odometry_noise_angle_std_dev",
                "type_name": "float",
                "description": "0.8 by default, representing the standard deviation of the angle noise added to the odometry measurements for more accurate pose estimation."
              },
              {
                "name": "measurement_noise_std_dev",
                "type_name": "float",
                "description": "Used to represent the standard deviation of the noise present in the robot's measurements. It affects how much the robot's estimate deviates from the true position."
              },
              {
                "name": "last_room_id",
                "type_name": "int",
                "description": "Used to store the room ID of the last room that was processed by the worker before its initialization was changed."
              },
              {
                "name": "actual_room_id",
                "type_name": "int",
                "description": "Used to keep track of the current room ID that the worker is in during its navigation. It is updated whenever the worker moves from one room to another."
              },
              {
                "name": "elapsed",
                "type_name": "float",
                "description": "Used to keep track of the time elapsed since the last successful message received from the robot. It is updated every time a message is processed, and its value represents the time spent processing the message."
              },
              {
                "name": "room_initialized",
                "type_name": "bool",
                "description": "Used to keep track of whether the worker has initialized the room or not. It is set to False when the worker first enters a new room, and to True when it exits that room."
              },
              {
                "name": "iterations",
                "type_name": "int",
                "description": "0-indexed, indicating the number of iterations (or passes) that the worker has performed on the graph. It is updated each time the worker processes a new edge or node in the graph."
              },
              {
                "name": "hide",
                "type_name": "str",
                "description": "Used to indicate whether the worker should be hidden or not. When set to \"True\", the worker will be hidden from the main window; otherwise, it will be displayed."
              },
              {
                "name": "init_graph",
                "type_name": "Python",
                "description": "Used to indicate whether the graph has been initialized or not. It is set to `True` when the graph is first constructed and then reset to `False` when the graph is updated."
              },
              {
                "name": "current_edge_set",
                "type_name": "bool",
                "description": "Used to keep track of whether the current edge set has been updated with a new RT translation or rotation. It is set to True when an edge set is updated with a new RT translation or rotation, and False otherwise."
              },
              {
                "name": "first_rt_set",
                "type_name": "Python",
                "description": "Initialized to `True` when the agent first sets a translation and rotation for the RT task, indicating that it is the first time this has happened in the simulation."
              },
              {
                "name": "translation_to_set",
                "type_name": "3D",
                "description": "Used to store the translation of the RT object to the set of corners of the room."
              },
              {
                "name": "rotation_to_set",
                "type_name": "3D",
                "description": "Used to store the rotation of a robot relative to its set position."
              },
              {
                "name": "room_polygon",
                "type_name": "3D",
                "description": "Used to represent the room where the robot is currently located. It stores a list of 3D vertices that define the shape of the room."
              },
              {
                "name": "security_polygon",
                "type_name": "list",
                "description": "Used to store a polygon representing the security area around the worker's target location. It is used to check if the worker's path intersects with any obstacles or security areas, ensuring the worker's safety during its motion."
              },
              {
                "name": "initialize_g2o_graph",
                "type_name": "instance",
                "description": "Responsible for initializing a Graph2O graph object to represent the environment, which is used for computing the robot's pose and motion."
              },
              {
                "name": "rt_set_last_time",
                "type_name": "int",
                "description": "Used to keep track of the time since the last RT set was received. It is used to determine when to send a new RT set."
              },
              {
                "name": "rt_time_min",
                "type_name": "float",
                "description": "Used to set a minimum time interval between RT sets. It serves as a threshold for determining when a new RT set should be initiated based on the agent's movement."
              },
              {
                "name": "last_update_with_corners",
                "type_name": "int",
                "description": "Used to store the last time corners were updated. It's used in conjunction with other attributes to maintain a consistent update schedule for corners."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `QApplication.instance().quit()` function every 200 milliseconds, indicating that the worker should shut down."
              },
              {
                "name": "compute",
                "type_name": "lambda",
                "description": "Used to compute the marginal probability of the worker's variables given the observed data. It takes an index `i` as input and returns a tuple containing the probability of each variable in the worker's graph given the observed data, as well as the gradient of the probability with respect to the variable's value."
              },
              {
                "name": "update_node_att",
                "type_name": "QMetaObjectAttribute",
                "description": "Used to update the attributes of a node in the graph when a new attribute is received from the ROS bag."
              },
              {
                "name": "update_edge",
                "type_name": "str",
                "description": "Used to update the edge attributes based on the edge type. It takes three parameters: `fr`, `to`, and `type`, which are the index of the current edge, the index of the next edge, and the edge type, respectively. The method updates the edge attributes based on the edge type and sets the `current_edge_set` attribute to `True`."
              },
              {
                "name": "update_edge_att",
                "type_name": "edge",
                "description": "Used to update the attributes of an edge in the graph."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 424,
            "docLength": null
          },
          {
            "id": "ba4c99e5-6e75-fe9c-5c42-896fd963bd46",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Initializes an instance of the SpecificWorker class by setting up various components such as g2o graph, visualizer, and timers. It also performs startup checks and connects signals for node and edge updates.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store mapping information between the original graph and the transformed graph for DSR algorithm implementation."
              },
              {
                "name": "startup_check",
                "type_name": "Optionalbool",
                "description": "Used to check for any errors in the graph during initialization."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 51,
              "insert": 52,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 56,
            "docLength": null
          },
          {
            "id": "9f5049cf-1b33-95b0-d74c-970e8a2091b1",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Performs RT odometry computation based on sensor data and updates the Graph2O graph with landmarks, affordances, and RT edges. It also maintains counters for valid corners and doors, and rotates the robot if necessary.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 123,
              "insert": 125,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 102,
            "docLength": null
          },
          {
            "id": "7d619d37-ef8e-0995-9f40-680ea469e08e",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Initializes a Graph2O graph for a specific robot and room by:\n\n* Extracting landmarks from the robot's point cloud\n* Calculating nominal corners based on landmarks and room geometry\n* Adding fixed poses to the g2o graph for the robot and doors in the room.",
            "params": [],
            "returns": {
              "type_name": "bool",
              "description": "1 if the initialization of the g2o graph was successful, and 0 otherwise."
            },
            "name": "initialize_g2o_graph",
            "location": {
              "start": 247,
              "insert": 250,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 115,
            "docLength": null
          },
          {
            "id": "cc39009c-98a2-8683-9e40-55a39ba52731",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Computes and updates the displacement values (lateral, forward, and angular) of a robot based on its odometry data, using a moving average of recent positions to smooth out the motion.",
            "params": [
              {
                "name": "odometry",
                "type_name": "3element",
                "description": "An instance of the `Odometry` class, representing the robot's position and velocity over time."
              }
            ],
            "returns": {
              "type_name": "3element",
              "description": "The lateral displacement (in meters), the forward displacement (in meters) and angular displacement (in radians)."
            },
            "name": "get_displacement",
            "location": {
              "start": 452,
              "insert": 453,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "90a11b67-7e49-1f85-f542-5b75590854cc",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Computes the covariance matrix for a given vertex in a graph, using an optimization algorithm to compute the marginals of the vertices and then constructing the covariance matrix.",
            "params": [
              {
                "name": "vertex",
                "type_name": "g2oVertex",
                "description": "Used to represent a vertex in the graph."
              }
            ],
            "returns": {
              "type_name": "2tuple",
              "description": "A pair of a boolean result and a covariance matrix."
            },
            "name": "get_covariance_matrix",
            "location": {
              "start": 471,
              "insert": 472,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "6eecaaa5-da88-1192-224a-b19526aa0376",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Within the `SpecificWorker` class loads a G2O file, visualizes the vertices and edges of the graph in a 3D scatter plot, and updates the plot in real-time as new measurements are received.",
            "params": [
              {
                "name": "optimizer",
                "type_name": "instance",
                "description": "An object that loads G2O files and provides access to their vertices and edges for visualization."
              }
            ],
            "returns": null,
            "name": "visualize_g2o_realtime",
            "location": {
              "start": 484,
              "insert": 485,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "25fc8d71-2815-d7be-5f44-ddf8121e9654",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Updates an attribute of a node in a graph, specifically the odometry node, by appending its current position and velocity to a queue for processing.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Passed as an argument to the function, representing the unique identifier for the node being updated."
              },
              {
                "name": "attribute_names",
                "type_name": "[str]",
                "description": "A list of names of attributes to update on the node associated with the given ID."
              }
            ],
            "returns": null,
            "name": "update_node_att",
            "location": {
              "start": 521,
              "insert": 530,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "003e6136-27e7-beb3-ab41-3f3c52ff0bb3",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Updates a node's type, but only if the type is \"corner\". If it is, the function also checks if the \"room\" node has been initialized and sets the `init_graph` attribute to `True`.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to represent the unique identifier of a node."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to indicate the type of node being updated, specifically whether it is a corner node or not."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 537,
              "insert": 547,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "7ae77879-8a05-aa85-404f-29e9171fb57a",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Deletes a node from a list maintained by a `SpecificWorker` instance, setting a flag to indicate that the list has been modified.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to identify the node to be deleted."
              }
            ],
            "returns": null,
            "name": "delete_node",
            "location": {
              "start": 549,
              "insert": 550,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "244f7983-496d-92a0-dc48-2e8b20b80070",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Updates the current room ID and RT translation and rotation when the agent moves from one room to another, and sets the `current_edge_set` variable to `True`.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "A reference to a node in the graph represented by the class instance."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Used as an index to access the target node of an edge in the graph."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to identify the edge type, which can be either \"current\" or \"RT\"."
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 558,
              "insert": 559,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "7c04e666-9a89-a691-0247-1180243804a0",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Deletes an edge from a graph based on its FID (fr), TID (to), and edge type (type).",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Used as the index of the edge to be deleted."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Used to represent the destination node ID for edge deletion."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to specify the edge type that should be deleted."
              }
            ],
            "returns": null,
            "name": "delete_edge",
            "location": {
              "start": 586,
              "insert": 587,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/long_term_graph.py",
    "content": {
      "structured": {
        "description": "a function called draw_metric_map that takes in a metric map object and plots the map using Matplotlib. It first loads the graph from a text file and defines various functions to work with the graph, such as get_room_corners, get_room_objects, and get_room_objects_coordinates. These functions recursively traverse the graph to find the corners or objects in a room, respectively. The draw_metric_map function then uses these functions to plot the rooms and objects in the map. Specifically, it plots each room as a rectangle and adds names to each room, and it plots each object as a point and adds a text label with its name.",
        "items": [
          {
            "id": "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8",
            "ancestors": [],
            "description": "Draws a graph of long-term spatial mobility data using PyQt and Matplotlib. It provides methods to visualize rooms, doors, walls, and edges in the graph.",
            "attributes": [
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to represent the graph object that contains the rooms, doors, and walls to be visualized."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a file specified by the user. It takes a string path as input and reads the graph data from it."
              },
              {
                "name": "fig",
                "type_name": "instance",
                "description": "A reference to the figure object that will be used to draw the graph."
              },
              {
                "name": "ax",
                "type_name": "MatplotlibFigure",
                "description": "Used to represent the axis object for the graph. It provides methods for adding patches, lines, and other visual elements to the graph."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 198,
            "docLength": null
          },
          {
            "id": "411ae665-2c3f-efb9-7546-d76e93280634",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Initializes an object of `LongTermGraph` class, loading a graph from a file using the `read_graph` method and displaying its summary.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the name of a file containing a graph represented as an adjacency matrix."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "fbfe681a-6ac8-9cb2-ad48-9c2d64fec643",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Generates a graphical representation of a subgraph within a larger graph, based on node and edge properties. It creates a figure and axis object, sets the title, and draws the nodes and edges using different colors for each type of node or edge.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter the nodes in the graph based on their types, only showing rooms and doors."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 191,
              "insert": 192,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 34,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/main.py",
    "content": {
      "structured": {
        "description": "Three functions: draw_graph, find_edge_with_attribute, and get_connected_door_nodes. The draw_graph function takes a graph object as input and uses PySide2's QtCore module to create a subplot and plot points on the graph. The find_edge_with_attribute function searches for an edge in a given graph based on a specific attribute, and the get_connected_door_nodes function recursively traverses a graph to find all connected door nodes in a given room. The code also loads a graph from a pickled file using the LongTermGraph class, and uses the compute_metric_map and draw_metric_map functions to display the graph's metric map and point locations.",
        "items": [
          {
            "id": "d3824e62-3401-2c9e-394e-2ee9ee755e69",
            "ancestors": [],
            "description": "Generates a graph based on a provided adjacency matrix using Kamada-Kawai layout algorithm, and adds node names and edges with arrowheads.",
            "params": [
              {
                "name": "graph",
                "type_name": "AbstractGraph",
                "description": "Used to represent a graph object that contains vertices and edges."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 6,
              "insert": 7,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "d7906eb3-709a-3c95-7c40-18ce0ab8dcfd",
            "ancestors": [],
            "description": "Searches through a graph's edges for an edge with a specific attribute equal to a given value. If such an edge is found, it returns it; otherwise, it returns `None`.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as an object that contains a collection of edges, where each edge represents a connection between two nodes in the graph."
              },
              {
                "name": "attribute",
                "type_name": "attribute",
                "description": "Used to specify the attribute of interest for finding an edge in a graph."
              },
              {
                "name": "value",
                "type_name": "object",
                "description": "Used to search for an edge in a graph based on a specific attribute."
              }
            ],
            "returns": {
              "type_name": "edge",
              "description": "An untyped reference to a graph edge that has the specified attribute equal to the provided value."
            },
            "name": "find_edge_with_attribute",
            "location": {
              "start": 41,
              "insert": 42,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          },
          {
            "id": "fe2cae8a-54a8-32a7-014a-24ebf3a8e0f2",
            "ancestors": [],
            "description": "Iterates over the edges in a graph and adds to an output list any edge connecting nodes with \"door\" in their names.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as g, which contains a collection of nodes and edges that define a graph structure."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of edges from the given graph."
            },
            "name": "get_room_edges",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e9acd19c-513f-f78e-4949-cd353d1b9b16",
            "ancestors": [],
            "description": "In Java code recursively queries the graph for all nodes connected to a given node via doors, returning a list of such nodes.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph structure."
              },
              {
                "name": "node",
                "type_name": "GraphNode",
                "description": "Referred to as a node in the graph."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of nodes that are connected to a specific node through doors."
            },
            "name": "get_connected_door_nodes",
            "location": {
              "start": 58,
              "insert": 60,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "9a2a2e72-8415-229d-6c4a-657476ccda61",
            "ancestors": [],
            "description": "Navigates through a graph by starting from a given room and visiting all other rooms reachable through doors. It keeps track of visited rooms using a list and prints information about each room it visits.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph with nodes and edges."
              },
              {
                "name": "current_room",
                "type_name": "dict",
                "description": "Represents the current room to be traversed in the graph."
              },
              {
                "name": "visited",
                "type_name": "list",
                "description": "Used to keep track of the rooms that have been visited during the traversal process, initialized to an empty list if None."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of strings representing the rooms that have been visited."
            },
            "name": "traverse_graph",
            "location": {
              "start": 74,
              "insert": 75,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and implements a timer-based mechanism for killing itself after a specified period. It also provides a signal kill to allow for handling of the termination from outside the worker. The code uses PySide2, Ice, and the RoboCompCommonBehavior module.",
        "items": [
          {
            "id": "8a50128c-009f-a1ac-2c45-674f0e62438e",
            "ancestors": [],
            "description": "Manages a timer and a signal to stop its own execution. It has methods to change the timer period and to emit the signal to stop itself.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreQObjectSlot",
                "description": "Used to emit a signal that can be caught by any connected slots to stop the worker's execution."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to setup the user interface of the class."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect the worker's state from concurrent access."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "Used to set the time interval for the timer signal emitted by the `setPeriod()` method, which changes its value on each call."
              },
              {
                "name": "timer",
                "type_name": "QtCoreQTimer",
                "description": "Used to start a timer that emits the `kill` signal after a specified period."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "dc756aa5-ebc6-5490-d649-854bb2ac26a4",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Initializes an object of the `GenericWorker` class, setting up a UI widget, creating a mutex for synchronization, and defining a timer with a period of 500 milliseconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as the parent widget for the GenericWorker object's UI."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "17fccd3d-bcc7-a9a3-5f45-73125f7d1f78",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Emits the `kill` signal, indicating that the object should be terminated.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "a2ebb705-7932-fb9b-3e45-f965c61ebf4d",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Sets the period of a timer and updates the internal variable `Period`.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class called `DSR` that implements a graph-based representation of a robot's environment and its interactions with objects in that environment. The `DSR` class has several methods for updating and manipulating the graph, including inserting new nodes or edges, updating node attributes, deleting nodes or edges, and more. These methods use various high-level packages such as `QApplication`, `QTimer`, `QDebug`, and `pickle` to perform their operations.\n\nOverall, the code defines a system for representing complex environmental interactions between a robot and its surroundings, using graph theory concepts and Python's high-level packages.",
        "items": [
          {
            "id": "8e2d2981-1343-51a0-0a43-35e06cb1288a",
            "ancestors": [],
            "description": "Manages a robot's interactions with its environment, including moving through doors, creating new rooms, and updating node attributes. It also generates images of rooms and handles long-term graph management.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "str",
                "description": "Used to set a fixed time interval for the worker to perform its function, allowing to schedule the work in a more organized manner."
              },
              {
                "name": "agent_id",
                "type_name": "int",
                "description": "Used to identify the worker as a specific agent, such as a robot or human, within the framework."
              },
              {
                "name": "g",
                "type_name": "igraph",
                "description": "A weighted graph that represents the environment of the agent. It stores the nodes (rooms) and edges between them, which represent the doors connecting the rooms. The graph is used to determine the robot's movement and interactions with its environment."
              },
              {
                "name": "update_node",
                "type_name": "str",
                "description": "Used to update a specific node in the graph based on its ID. It takes one argument, which is the type of update (either \"door\" or \"room\"), and performs different actions depending on the update type."
              },
              {
                "name": "update_edge",
                "type_name": "str",
                "description": "Used to update the edge type of a specific edge in the graph. It takes two arguments: the first is the id of the starting node, and the second is the id of the ending node, as well as an optional third argument which is the new edge type to be set for that edge."
              },
              {
                "name": "startup_check",
                "type_name": "QTimersingleShot",
                "description": "Used to check for possible termination of the worker after a specific timeout period of 200 milliseconds."
              },
              {
                "name": "rt_api",
                "type_name": "instance",
                "description": "Used for accessing the RT API of the environment to get information about the robot's position, orientation, and other relevant data."
              },
              {
                "name": "inner_api",
                "type_name": "internal",
                "description": "Used for communication between different agents in a multi-agent environment, allowing them to exchange information and coordinate their actions."
              },
              {
                "name": "robot_name",
                "type_name": "str",
                "description": "Used as the ID of the robot in the internal graph, which is generated based on the agent's name."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "Used to represent the unique identifier of the robot agent in the environment."
              },
              {
                "name": "last_robot_pose",
                "type_name": "3D",
                "description": "Used to store the last known position of the robot, which can be used to determine the robot's motion and interaction with its environment."
              },
              {
                "name": "robot_exit_pose",
                "type_name": "str",
                "description": "3D pose representation of the robot when it exits a room. It is used to check if the robot has reached its destination and to generate an image of the room."
              },
              {
                "name": "state",
                "type_name": "str",
                "description": "Used to store the current state of the worker (either \"idle\", \"busy\", or \"crossed\") indicating whether the worker is available or not for new tasks."
              },
              {
                "name": "affordance_node_active_id",
                "type_name": "int",
                "description": "Used to store the ID of the affordance node that indicates when a robot reaches a certain affordance, it will stop moving and wait for further instructions."
              },
              {
                "name": "exit_door_id",
                "type_name": "int",
                "description": "13 by default, representing the index of the door node that marks the exit of a room in the graph. It is used to identify the door through which the robot exits a room when it needs to navigate to another room."
              },
              {
                "name": "room_exit_door_id",
                "type_name": "int",
                "description": "0-indexed. It represents the ID of the door connecting a room to the environment. It is used to identify the door through which the robot can exit a room."
              },
              {
                "name": "enter_room_node_id",
                "type_name": "int",
                "description": "Used to store the ID of the room node that the worker enters after crossing the door."
              },
              {
                "name": "graph",
                "type_name": "igraphGraph",
                "description": "Used to store the agent's internal graph, which represents the environment and the robot's movements."
              },
              {
                "name": "vertex_size",
                "type_name": "int",
                "description": "16 by default, which means that each vertex in the graph has a size of 16 pixels in the internal graph representation."
              },
              {
                "name": "not_required_attrs",
                "type_name": "list",
                "description": "Used to store a list of attribute names that are not required for the worker's functionality, but may be useful for debugging or other purposes."
              },
              {
                "name": "long_term_graph",
                "type_name": "igraphGraph",
                "description": "Used for storing the long-term graph of the environment, which is different from the short-term graph used for navigation."
              },
              {
                "name": "global_map",
                "type_name": "igraphGraph",
                "description": "Used to store the global map of the environment. It is used to represent the entire environment and its connections, rather than just the local area around a single agent or node."
              },
              {
                "name": "insert_current_edge",
                "type_name": "Edge",
                "description": "Used to insert a new edge in the graph with the current room as the source and the robot as the destination, with the \"current\" edge type."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule the worker's update loop to run after a certain delay (200 milliseconds in this case)."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "Used to compute the worker's output for a given input."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 49,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 568,
            "docLength": null
          },
          {
            "id": "241962dc-0914-a79d-9b40-5909c260c9ce",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Initializes an object of the `SpecificWorker` class, setting its graph, period, and other properties.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "igraphGraph",
                "description": "Used to initialize the graph object for the specific worker's long-term spatial memory."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the graph has been modified since the last startup. If set to True, it will call the `startup_check` method, otherwise it will skip it."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 46,
            "docLength": null
          },
          {
            "id": "6bfee08c-8e0e-7abf-324a-8ea14b6e006b",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Sets parameters for an object, removes a self-edge from a room, stores ID of the exit door, names both doors with the other side door attribute, and reads entrance door node to add other side door attributes.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Passed to set parameters for an object of class `Room`."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True."
            },
            "name": "setParams",
            "location": {
              "start": 116,
              "insert": 117,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "ed2b32ce-b574-b9a6-4c4b-a7dafa3d6b90",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Determines the current state of the worker and performs the appropriate action based on that state, including idling, crossing, crossing, initializing rooms, knowing rooms, initializing doors, storing the graph, and removing nodes.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 130,
              "insert": 149,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "250b555a-b6a6-759f-324b-d064b390a847",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Performs affordance-based navigation for an autonomous robot, specifically:\n\n1. Identifies active affordance nodes in the short-term graph.\n2. Checks if any \"current\" edge exists and if so, identifies the door node leading to the next room.\n3. Computes the final robot pose and door pose in the new room reference frame using the inner API.",
            "params": [],
            "returns": null,
            "name": "idle",
            "location": {
              "start": 168,
              "insert": 170,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 76,
            "docLength": null
          },
          {
            "id": "c19737e3-8045-f7b9-134c-d9f08ec98f43",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Determines whether a node represents an exit door and, if so, updates the state of the `SpecificWorker` instance to reflect this information.",
            "params": [],
            "returns": null,
            "name": "crossed",
            "location": {
              "start": 269,
              "insert": 271,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "5e3379bd-db81-d1a5-8149-2cb24d34ac7c",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Determines and remembers the room node ID that the worker will enter after leaving the current room, and updates the state to \"initializing doors\".",
            "params": [],
            "returns": null,
            "name": "initializing_room",
            "location": {
              "start": 289,
              "insert": 292,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "11cbfdf2-e11b-e0aa-4947-9344b9dd510a",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Within the SpecificWorker class updates the RT object's position and rotation based on the last known affordance pose, taking into account the robot's movement and the associated door found in the global map.",
            "params": [],
            "returns": null,
            "name": "known_room",
            "location": {
              "start": 303,
              "insert": 305,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 73,
            "docLength": null
          },
          {
            "id": "67025356-2f92-3c84-ef43-e9f81d799e94",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "1) finds edges leading to the exit door, 2) checks if any match edges exist, and 3) updates node attributes and associations for doors involved.",
            "params": [],
            "returns": null,
            "name": "initializing_doors",
            "location": {
              "start": 397,
              "insert": 399,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "cb77cc09-6f32-8aa9-244d-8bd8ff15aafd",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Adds an edge to a graph between two nodes representing doors, and sets their \"other side door name\" and \"connected room name\" attributes based on the input door names.",
            "params": [
              {
                "name": "door_1",
                "type_name": "str",
                "description": "A name of a door node in the graph."
              },
              {
                "name": "door_2",
                "type_name": "str",
                "description": "Represented as a list of two elements, where each element represents the name of a door node in the graph."
              }
            ],
            "returns": null,
            "name": "associate_doors",
            "location": {
              "start": 436,
              "insert": 438,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "8cdc79dc-b155-0387-ae48-8f95fac0413f",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Stores the graph data in a file \"graph.pkl\" and retrieves the room node from the graph using its exit door ID, handling any exceptions.",
            "params": [],
            "returns": null,
            "name": "store_graph",
            "location": {
              "start": 455,
              "insert": 456,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "4de8cad4-147a-8d9b-234a-1d5133da4d7d",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Removes nodes from the long-term graph based on their room number, preserving edges that connect rooms with the same number. It first identifies nodes with room numbers matching the input room number, then deletes nodes and their corresponding edges in the long-term graph.",
            "params": [],
            "returns": null,
            "name": "removing",
            "location": {
              "start": 469,
              "insert": 471,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "f0040ef8-9762-97a1-634e-f2fbeeea9223",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Traverses the graph represented by an igraph object `g` and performs some operations on it. Specifically, it: (1) retrieves a node with the given `node_id`, (2) extracts its RT children edges from the graph, (3) inserts a vertex representing the current node in the graph, and (4) recursively traverses the RT children of each of these nodes.",
            "params": [
              {
                "name": "node_id",
                "type_name": "int",
                "description": "A node ID to traverse in the graph."
              }
            ],
            "returns": null,
            "name": "traverse_graph",
            "location": {
              "start": 495,
              "insert": 497,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "79a1657a-5231-9baa-8144-c7d2b2a58dee",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "In the `SpecificWorker` class recursively traverses the graph, inserting vertices and edges into a DSR graph for each vertex that has a successor with a higher level than itself, and then recursively traversing the successor vertex.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphVertex",
                "description": "Used to represent a vertex in an igraph graph."
              }
            ],
            "returns": null,
            "name": "traverse_igraph",
            "location": {
              "start": 505,
              "insert": 506,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "4b40456c-9fcf-758a-2a42-5d328535710a",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Adds a new vertex to an igraph object, setting its name and ID, as well as assigning values to certain attributes. It also attempts to find an edge connecting the new vertex to a predefined \"other side door\" vertex, based on attribute values.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphNode",
                "description": "Passed the vertex to be added to the graph."
              }
            ],
            "returns": null,
            "name": "insert_igraph_vertex",
            "location": {
              "start": 518,
              "insert": 519,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "1ff5dd0f-33d6-0bb1-1947-12b885b5c298",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Inserts a new node into a graph, updating the parent node's attributes and setting the new node's attributes based on the input node.",
            "params": [
              {
                "name": "parent_name",
                "type_name": "str",
                "description": "Used to specify the name of the parent node to which the new node will be added."
              },
              {
                "name": "node",
                "type_name": "dict",
                "description": "Passed as an attribute of a vertex."
              }
            ],
            "returns": null,
            "name": "insert_dsr_vertex",
            "location": {
              "start": 553,
              "insert": 555,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "c43f5780-c5b5-1db6-8f43-382b331bd896",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Adds an edge to an igraph object based on the attributes of the given edge, including the translation and rotation of the edge.",
            "params": [
              {
                "name": "edge",
                "type_name": "igraphEdge",
                "description": "Passed as an instance of Igraph Edge class, which contains attributes including origin, destination, rt translation, and rotation."
              }
            ],
            "returns": null,
            "name": "insert_igraph_edge",
            "location": {
              "start": 567,
              "insert": 570,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "43900a48-129f-0ea2-a944-43b63dbaa2ec",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Adds an edge to the graph, connecting a node representing the origin to a node representing the destination, with the given RT values and rotation.",
            "params": [
              {
                "name": "org",
                "type_name": "instance",
                "description": "Representing the start node of the edge to be inserted."
              },
              {
                "name": "dest",
                "type_name": "Agent",
                "description": "Passed as an argument to the function, representing the destination node for which the edge is being inserted."
              }
            ],
            "returns": null,
            "name": "insert_dsr_edge",
            "location": {
              "start": 579,
              "insert": 582,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "d6f2e148-3e44-84a9-bf43-dcb827871106",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Draws the graph using Matplotlib, clearing the axis before laying out the vertices and edges. It then plots each edge with an arrow pointing to its tail node, and displays node names at their centers. Finally, it sets limits on the x and y axes.",
            "params": [],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 609,
              "insert": 610,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "f36cee33-dca3-99ac-1243-f942df6664c6",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Retrieves the room ID associated with a given node ID by accessing the `room_id` attribute of the node's attributes, and returns the room ID if successful, or -1 otherwise.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Used to retrieve a specific node from the graph."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "The room ID associated with a given node ID."
            },
            "name": "check_element_room_number",
            "location": {
              "start": 634,
              "insert": 635,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "03d00d97-d654-dea5-514a-bd8142708d10",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Within the SpecificWorker class retrieves an element level attribute from a given node and returns its value. If the attribute is not found, it prints an error message and returns -1.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Used as an identifier of a node within the graph."
              }
            ],
            "returns": {
              "type_name": "integerints",
              "description": "The level of an element with the given node ID."
            },
            "name": "check_element_level",
            "location": {
              "start": 643,
              "insert": 644,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "0ea5bdac-20c3-a691-e24f-7e61ffbee8e3",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Retrieves the attributes of nodes connected by RT edges in a graph, and then prints their origin and destination nodes, as well as any translation attribute found.",
            "params": [
              {
                "name": "room_node_id",
                "type_name": "str",
                "description": "Used to retrieve the node ID of the room to be drawn."
              }
            ],
            "returns": null,
            "name": "generate_room_picture",
            "location": {
              "start": 686,
              "insert": 688,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "31965a19-6976-7285-2f4b-afb9ec073b71",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Inserts or assigns an edge with specified properties to a graph, specifically the current edge representing the worker's location.",
            "params": [
              {
                "name": "room_id",
                "type_name": "str",
                "description": "Used to specify the current room id for which the edge is being created or updated."
              }
            ],
            "returns": null,
            "name": "insert_current_edge",
            "location": {
              "start": 721,
              "insert": 723,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f87a4863-6096-8a94-4044-9bfcb8540c8a",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Updates a node's type, checking if it's a door and inserting its corresponding edge in the long-term graph. If the id is the affordance node's active id, it checks if the node is completed and not active, and transitions to the crossed state.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to represent the unique identifier of a node in the graph."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to identify the node type, which determines the actions performed on the node when the function is called."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 735,
              "insert": 736,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "aca8a629-4ef8-e5ba-9748-4191fd060065",
            "ancestors": [
              "8e2d2981-1343-51a0-0a43-35e06cb1288a"
            ],
            "description": "Updates an edge based on its ID, type and node IDs. It checks if the specified edge exists and is not the current edge, and sets it as the current edge if conditions are met.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Representative of the ID of the node it originates from."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "The ID of the destination node in the graph."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Set to \"RT\"."
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 786,
              "insert": 790,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  }
]