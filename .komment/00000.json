[
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/src/long_term_graph.py",
    "content": {
      "structured": {
        "description": "A 2D environment with obstacles and a player, and uses a probabilistic algorithm to compute the shortest path between two points in the environment while avoiding obstacles. It also provides functions to draw the environment and its objects on a figure using Matplotlib, and to compute the projective coordinates of the corners of a room in the environment frame. Additionally, it defines functions to get the list of objects in a room by type and their projective coordinates in the room frame. The code uses the Geometry package for computing shortest paths and the Matplotlib library for drawing visualizations.",
        "items": [
          {
            "id": "7453d1a9-2093-7088-9941-e01ea3c40300",
            "ancestors": [],
            "description": "Computes and draws a graph representation of a long-term memory space, allowing for door-based navigation and metric reconstruction. It takes in a set of rooms and their connections as well as a base room name and computes the metric map between them.",
            "attributes": [
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to store a graph representation of a long-term spatial memory task. It contains nodes, edges, and types (rooms, doors, walls) that are used to compute the metric map."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a pickled file. It returns a `Subgraph` object representing the graph."
              },
              {
                "name": "fig",
                "type_name": "matplotlibfigureFigure",
                "description": "Used to store the figure object that will be drawn with the graph."
              },
              {
                "name": "ax",
                "type_name": "Axes",
                "description": "Used to store the axis object for plotting the graph."
              },
              {
                "name": "fig_2",
                "type_name": "MatplotlibFigure",
                "description": "Used to store a figure object used for drawing the graph."
              },
              {
                "name": "ax_2",
                "type_name": "Axis",
                "description": "Used to represent the graph's second axis, which is used for the metric reconstruction \nplot. It provides functions to set the title, labels, and limits for this axis."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 244,
            "docLength": null
          },
          {
            "id": "89c82564-d052-e2bf-6549-98b7754116ea",
            "ancestors": [
              "7453d1a9-2093-7088-9941-e01ea3c40300"
            ],
            "description": "In the LongTermGraph class reads a graph from a file, creates subplots for metric reconstruction and LTSM display, and initializes the graph object.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the name of the graph file to read."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "97a1ea39-6c18-2888-1d49-0d9df0c43f81",
            "ancestors": [
              "7453d1a9-2093-7088-9941-e01ea3c40300"
            ],
            "description": "Generates a graph visualization of a subgraph of a larger graph, based on node and edge types. It uses the `layout` parameter to specify the layout algorithm and colors nodes and edges based on their type.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter the nodes and edges displayed on the graph based on their types, with \"room\" being the default value for only rooms are shown."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 220,
              "insert": 221,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/g2o_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and provides a kill signal for shutting down the worker. The code also sets up an ice slice and imports a RoboCompCommonBehavior module. Additionally, the code creates a Ui_guiDlg class and initializes a timer to call a method every 30 milliseconds.",
        "items": [
          {
            "id": "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8",
            "ancestors": [],
            "description": "Manages a worker process with a periodic timer and provides a signal for termination. It also has a method to set the period of the timer.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreSignal",
                "description": "Used to emit a signal when the object needs to be killed."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to initialize and access the user interface of the widget."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect access to the internal state of the worker object, particularly the timer and kill signal."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "30 milliseconds by default, which represents the time interval for the timer to run."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `killYourSelf` slot after a specified period of time."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "795c292f-f253-f1aa-a748-23953c9013be",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Initializes an instance of the `GenericWorker` class, setting up a GUI dialog and creating a mutex for managing access to the timer. It also sets the period of the timer to 30 seconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as an argument for the setupUi method."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "ea51cd3f-4286-88a2-5c4e-a765280c1202",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Emits the `kill` signal, indicating that the instance should be destroyed.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "20082581-a4f0-66af-9a45-78e2e70b070f",
            "ancestors": [
              "cb6f42fc-bcd1-7fb5-eb49-91afccba59e8"
            ],
            "description": "Updates the `Period` attribute and starts a timer with the new period value using the `timer.start()` method.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/g2o_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class `Robot` that handles robot movement and mapping in a graph-based environment. It uses the `networkx` library for working with graphs and provides functions for updating node attributes, creating new nodes, deleting nodes, and updating edges. The code also includes functionality for handling RT (room transition) events and storing translation and rotation information for future use. Overall, the code is focused on tracking the movement of a robot in a graph-based environment and using that information to make decisions about how to navigate the space.",
        "items": [
          {
            "id": "cedd1d2f-851b-87a9-c542-e4ba389373e2",
            "ancestors": [],
            "description": "Performs specific tasks related to a worker robot's navigation and localization in an unknown environment, such as updating the graph, getting displacement, computing covariance matrix, visualizing G2O real-time, and more.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "float",
                "description": "Used to control the time interval between consecutive calls to the `update_worker` method, which is responsible for updating the robot's state based on the received data. The value of `Period` determines how often the worker will be called, with larger values resulting in slower updates but potentially reducing the load on the system."
              },
              {
                "name": "agent_id",
                "type_name": "int",
                "description": "Used as a unique identifier for the agent's id."
              },
              {
                "name": "g",
                "type_name": "undirected",
                "description": "Used to store the graph representing the environment. It contains nodes and edges that represent the obstacles, walls, and other features of the environment."
              },
              {
                "name": "startup_check",
                "type_name": "QTimersingleShot",
                "description": "Used to check for the application's quit after a certain time interval, which is 200 milliseconds in this case."
              },
              {
                "name": "rt_api",
                "type_name": "str",
                "description": "100% sure to be a valid ROS topic name for receiving real-time data from a robotic arm."
              },
              {
                "name": "inner_api",
                "type_name": "instance",
                "description": "Used to store a reference to the inner API of the worker, which allows for direct communication with the worker's inner workings."
              },
              {
                "name": "odometry_node_id",
                "type_name": "int",
                "description": "Used to identify the node in the graph that corresponds to the robot's odometry information. It is used to store the odometry data in the graph and for visualization purposes."
              },
              {
                "name": "odometry_queue",
                "type_name": "3element",
                "description": "Used to store the odometry information of the robot in a First-In-First-Out (FIFO) queue. It stores the advance, lateral, and angular displacement of the robot at each time step, which are computed using the G2O optimization algorithm."
              },
              {
                "name": "last_odometry",
                "type_name": "3element",
                "description": "Used to store the last known odometry information of the robot, which is used in the computation of the displacement and covariance matrix."
              },
              {
                "name": "g2o",
                "type_name": "Optimizer",
                "description": "Used to store the Gauss-Newton optimizer for graph matching. It is used to compute marginals \nand to update the position of vertices in the graph."
              },
              {
                "name": "visualizer",
                "type_name": "Visualizer",
                "description": "Used to visualize the graph and edges in real-time during the RT algorithm execution. It provides a function to update the visualization and can be used to display the graph and edges in different formats, such as 3D or 2D."
              },
              {
                "name": "odometry_noise_std_dev",
                "type_name": "float",
                "description": "0.1 by default, representing the standard deviation of noise in the odometry measurements. It helps to control the level of random fluctuations in the robot's motion."
              },
              {
                "name": "odometry_noise_angle_std_dev",
                "type_name": "float",
                "description": "0.8 by default, representing the standard deviation of the angle noise added to the odometry measurements for more accurate pose estimation."
              },
              {
                "name": "measurement_noise_std_dev",
                "type_name": "float",
                "description": "Used to represent the standard deviation of the noise present in the robot's measurements. It affects how much the robot's estimate deviates from the true position."
              },
              {
                "name": "last_room_id",
                "type_name": "int",
                "description": "Used to store the room ID of the last room that was processed by the worker before its initialization was changed."
              },
              {
                "name": "actual_room_id",
                "type_name": "int",
                "description": "Used to keep track of the current room ID that the worker is in during its navigation. It is updated whenever the worker moves from one room to another."
              },
              {
                "name": "elapsed",
                "type_name": "float",
                "description": "Used to keep track of the time elapsed since the last successful message received from the robot. It is updated every time a message is processed, and its value represents the time spent processing the message."
              },
              {
                "name": "room_initialized",
                "type_name": "bool",
                "description": "Used to keep track of whether the worker has initialized the room or not. It is set to False when the worker first enters a new room, and to True when it exits that room."
              },
              {
                "name": "iterations",
                "type_name": "int",
                "description": "0-indexed, indicating the number of iterations (or passes) that the worker has performed on the graph. It is updated each time the worker processes a new edge or node in the graph."
              },
              {
                "name": "hide",
                "type_name": "str",
                "description": "Used to indicate whether the worker should be hidden or not. When set to \"True\", the worker will be hidden from the main window; otherwise, it will be displayed."
              },
              {
                "name": "init_graph",
                "type_name": "Python",
                "description": "Used to indicate whether the graph has been initialized or not. It is set to `True` when the graph is first constructed and then reset to `False` when the graph is updated."
              },
              {
                "name": "current_edge_set",
                "type_name": "bool",
                "description": "Used to keep track of whether the current edge set has been updated with a new RT translation or rotation. It is set to True when an edge set is updated with a new RT translation or rotation, and False otherwise."
              },
              {
                "name": "first_rt_set",
                "type_name": "Python",
                "description": "Initialized to `True` when the agent first sets a translation and rotation for the RT task, indicating that it is the first time this has happened in the simulation."
              },
              {
                "name": "translation_to_set",
                "type_name": "3D",
                "description": "Used to store the translation of the RT object to the set of corners of the room."
              },
              {
                "name": "rotation_to_set",
                "type_name": "3D",
                "description": "Used to store the rotation of a robot relative to its set position."
              },
              {
                "name": "room_polygon",
                "type_name": "3D",
                "description": "Used to represent the room where the robot is currently located. It stores a list of 3D vertices that define the shape of the room."
              },
              {
                "name": "security_polygon",
                "type_name": "list",
                "description": "Used to store a polygon representing the security area around the worker's target location. It is used to check if the worker's path intersects with any obstacles or security areas, ensuring the worker's safety during its motion."
              },
              {
                "name": "initialize_g2o_graph",
                "type_name": "instance",
                "description": "Responsible for initializing a Graph2O graph object to represent the environment, which is used for computing the robot's pose and motion."
              },
              {
                "name": "rt_set_last_time",
                "type_name": "int",
                "description": "Used to keep track of the time since the last RT set was received. It is used to determine when to send a new RT set."
              },
              {
                "name": "rt_time_min",
                "type_name": "float",
                "description": "Used to set a minimum time interval between RT sets. It serves as a threshold for determining when a new RT set should be initiated based on the agent's movement."
              },
              {
                "name": "last_update_with_corners",
                "type_name": "int",
                "description": "Used to store the last time corners were updated. It's used in conjunction with other attributes to maintain a consistent update schedule for corners."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `QApplication.instance().quit()` function every 200 milliseconds, indicating that the worker should shut down."
              },
              {
                "name": "compute",
                "type_name": "lambda",
                "description": "Used to compute the marginal probability of the worker's variables given the observed data. It takes an index `i` as input and returns a tuple containing the probability of each variable in the worker's graph given the observed data, as well as the gradient of the probability with respect to the variable's value."
              },
              {
                "name": "update_node_att",
                "type_name": "QMetaObjectAttribute",
                "description": "Used to update the attributes of a node in the graph when a new attribute is received from the ROS bag."
              },
              {
                "name": "update_edge",
                "type_name": "str",
                "description": "Used to update the edge attributes based on the edge type. It takes three parameters: `fr`, `to`, and `type`, which are the index of the current edge, the index of the next edge, and the edge type, respectively. The method updates the edge attributes based on the edge type and sets the `current_edge_set` attribute to `True`."
              },
              {
                "name": "update_edge_att",
                "type_name": "edge",
                "description": "Used to update the attributes of an edge in the graph."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 424,
            "docLength": null
          },
          {
            "id": "ba4c99e5-6e75-fe9c-5c42-896fd963bd46",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Initializes an instance of the SpecificWorker class by setting up various components such as g2o graph, visualizer, and timers. It also performs startup checks and connects signals for node and edge updates.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store mapping information between the original graph and the transformed graph for DSR algorithm implementation."
              },
              {
                "name": "startup_check",
                "type_name": "Optionalbool",
                "description": "Used to check for any errors in the graph during initialization."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 51,
              "insert": 52,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 56,
            "docLength": null
          },
          {
            "id": "9f5049cf-1b33-95b0-d74c-970e8a2091b1",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Performs RT odometry computation based on sensor data and updates the Graph2O graph with landmarks, affordances, and RT edges. It also maintains counters for valid corners and doors, and rotates the robot if necessary.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 123,
              "insert": 125,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 102,
            "docLength": null
          },
          {
            "id": "7d619d37-ef8e-0995-9f40-680ea469e08e",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Initializes a Graph2O graph for a specific robot and room by:\n\n* Extracting landmarks from the robot's point cloud\n* Calculating nominal corners based on landmarks and room geometry\n* Adding fixed poses to the g2o graph for the robot and doors in the room.",
            "params": [],
            "returns": {
              "type_name": "bool",
              "description": "1 if the initialization of the g2o graph was successful, and 0 otherwise."
            },
            "name": "initialize_g2o_graph",
            "location": {
              "start": 247,
              "insert": 250,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 115,
            "docLength": null
          },
          {
            "id": "cc39009c-98a2-8683-9e40-55a39ba52731",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Computes and updates the displacement values (lateral, forward, and angular) of a robot based on its odometry data, using a moving average of recent positions to smooth out the motion.",
            "params": [
              {
                "name": "odometry",
                "type_name": "3element",
                "description": "An instance of the `Odometry` class, representing the robot's position and velocity over time."
              }
            ],
            "returns": {
              "type_name": "3element",
              "description": "The lateral displacement (in meters), the forward displacement (in meters) and angular displacement (in radians)."
            },
            "name": "get_displacement",
            "location": {
              "start": 452,
              "insert": 453,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "90a11b67-7e49-1f85-f542-5b75590854cc",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Computes the covariance matrix for a given vertex in a graph, using an optimization algorithm to compute the marginals of the vertices and then constructing the covariance matrix.",
            "params": [
              {
                "name": "vertex",
                "type_name": "g2oVertex",
                "description": "Used to represent a vertex in the graph."
              }
            ],
            "returns": {
              "type_name": "2tuple",
              "description": "A pair of a boolean result and a covariance matrix."
            },
            "name": "get_covariance_matrix",
            "location": {
              "start": 471,
              "insert": 472,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "6eecaaa5-da88-1192-224a-b19526aa0376",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Within the `SpecificWorker` class loads a G2O file, visualizes the vertices and edges of the graph in a 3D scatter plot, and updates the plot in real-time as new measurements are received.",
            "params": [
              {
                "name": "optimizer",
                "type_name": "instance",
                "description": "An object that loads G2O files and provides access to their vertices and edges for visualization."
              }
            ],
            "returns": null,
            "name": "visualize_g2o_realtime",
            "location": {
              "start": 484,
              "insert": 485,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 29,
            "docLength": null
          },
          {
            "id": "25fc8d71-2815-d7be-5f44-ddf8121e9654",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Updates an attribute of a node in a graph, specifically the odometry node, by appending its current position and velocity to a queue for processing.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Passed as an argument to the function, representing the unique identifier for the node being updated."
              },
              {
                "name": "attribute_names",
                "type_name": "[str]",
                "description": "A list of names of attributes to update on the node associated with the given ID."
              }
            ],
            "returns": null,
            "name": "update_node_att",
            "location": {
              "start": 521,
              "insert": 530,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "003e6136-27e7-beb3-ab41-3f3c52ff0bb3",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Updates a node's type, but only if the type is \"corner\". If it is, the function also checks if the \"room\" node has been initialized and sets the `init_graph` attribute to `True`.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to represent the unique identifier of a node."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to indicate the type of node being updated, specifically whether it is a corner node or not."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 537,
              "insert": 547,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "7ae77879-8a05-aa85-404f-29e9171fb57a",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Deletes a node from a list maintained by a `SpecificWorker` instance, setting a flag to indicate that the list has been modified.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Used to identify the node to be deleted."
              }
            ],
            "returns": null,
            "name": "delete_node",
            "location": {
              "start": 549,
              "insert": 550,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "244f7983-496d-92a0-dc48-2e8b20b80070",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Updates the current room ID and RT translation and rotation when the agent moves from one room to another, and sets the `current_edge_set` variable to `True`.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "A reference to a node in the graph represented by the class instance."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Used as an index to access the target node of an edge in the graph."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to identify the edge type, which can be either \"current\" or \"RT\"."
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 558,
              "insert": 559,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "7c04e666-9a89-a691-0247-1180243804a0",
            "ancestors": [
              "cedd1d2f-851b-87a9-c542-e4ba389373e2"
            ],
            "description": "Deletes an edge from a graph based on its FID (fr), TID (to), and edge type (type).",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "Used as the index of the edge to be deleted."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Used to represent the destination node ID for edge deletion."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Used to specify the edge type that should be deleted."
              }
            ],
            "returns": null,
            "name": "delete_edge",
            "location": {
              "start": 586,
              "insert": 587,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "long_term_graph.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/long_term_graph.py",
    "content": {
      "structured": {
        "description": "a function called draw_metric_map that takes in a metric map object and plots the map using Matplotlib. It first loads the graph from a text file and defines various functions to work with the graph, such as get_room_corners, get_room_objects, and get_room_objects_coordinates. These functions recursively traverse the graph to find the corners or objects in a room, respectively. The draw_metric_map function then uses these functions to plot the rooms and objects in the map. Specifically, it plots each room as a rectangle and adds names to each room, and it plots each object as a point and adds a text label with its name.",
        "items": [
          {
            "id": "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8",
            "ancestors": [],
            "description": "Draws a graph of long-term spatial mobility data using PyQt and Matplotlib. It provides methods to visualize rooms, doors, walls, and edges in the graph.",
            "attributes": [
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to represent the graph object that contains the rooms, doors, and walls to be visualized."
              },
              {
                "name": "read_graph",
                "type_name": "instance",
                "description": "Used to read a graph from a file specified by the user. It takes a string path as input and reads the graph data from it."
              },
              {
                "name": "fig",
                "type_name": "instance",
                "description": "A reference to the figure object that will be used to draw the graph."
              },
              {
                "name": "ax",
                "type_name": "MatplotlibFigure",
                "description": "Used to represent the axis object for the graph. It provides methods for adding patches, lines, and other visual elements to the graph."
              }
            ],
            "name": "LongTermGraph",
            "location": {
              "start": 15,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 198,
            "docLength": null
          },
          {
            "id": "411ae665-2c3f-efb9-7546-d76e93280634",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Initializes an object of `LongTermGraph` class, loading a graph from a file using the `read_graph` method and displaying its summary.",
            "params": [
              {
                "name": "file_name",
                "type_name": "str",
                "description": "Used to specify the name of a file containing a graph represented as an adjacency matrix."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 16,
              "insert": 17,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "fbfe681a-6ac8-9cb2-ad48-9c2d64fec643",
            "ancestors": [
              "5176435a-f92b-e4bd-1b4e-e1e310ab5ae8"
            ],
            "description": "Generates a graphical representation of a subgraph within a larger graph, based on node and edge properties. It creates a figure and axis object, sets the title, and draws the nodes and edges using different colors for each type of node or edge.",
            "params": [
              {
                "name": "only_rooms",
                "type_name": "bool",
                "description": "Used to filter the nodes in the graph based on their types, only showing rooms and doors."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 191,
              "insert": 192,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 34,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "agents/long_term_spatial_memory_agent/scripts/main.py",
    "content": {
      "structured": {
        "description": "Three functions: draw_graph, find_edge_with_attribute, and get_connected_door_nodes. The draw_graph function takes a graph object as input and uses PySide2's QtCore module to create a subplot and plot points on the graph. The find_edge_with_attribute function searches for an edge in a given graph based on a specific attribute, and the get_connected_door_nodes function recursively traverses a graph to find all connected door nodes in a given room. The code also loads a graph from a pickled file using the LongTermGraph class, and uses the compute_metric_map and draw_metric_map functions to display the graph's metric map and point locations.",
        "items": [
          {
            "id": "d3824e62-3401-2c9e-394e-2ee9ee755e69",
            "ancestors": [],
            "description": "Generates a graph based on a provided adjacency matrix using Kamada-Kawai layout algorithm, and adds node names and edges with arrowheads.",
            "params": [
              {
                "name": "graph",
                "type_name": "AbstractGraph",
                "description": "Used to represent a graph object that contains vertices and edges."
              }
            ],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 6,
              "insert": 7,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "d7906eb3-709a-3c95-7c40-18ce0ab8dcfd",
            "ancestors": [],
            "description": "Searches through a graph's edges for an edge with a specific attribute equal to a given value. If such an edge is found, it returns it; otherwise, it returns `None`.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as an object that contains a collection of edges, where each edge represents a connection between two nodes in the graph."
              },
              {
                "name": "attribute",
                "type_name": "attribute",
                "description": "Used to specify the attribute of interest for finding an edge in a graph."
              },
              {
                "name": "value",
                "type_name": "object",
                "description": "Used to search for an edge in a graph based on a specific attribute."
              }
            ],
            "returns": {
              "type_name": "edge",
              "description": "An untyped reference to a graph edge that has the specified attribute equal to the provided value."
            },
            "name": "find_edge_with_attribute",
            "location": {
              "start": 41,
              "insert": 42,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          },
          {
            "id": "fe2cae8a-54a8-32a7-014a-24ebf3a8e0f2",
            "ancestors": [],
            "description": "Iterates over the edges in a graph and adds to an output list any edge connecting nodes with \"door\" in their names.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Represented as g, which contains a collection of nodes and edges that define a graph structure."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of edges from the given graph."
            },
            "name": "get_room_edges",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e9acd19c-513f-f78e-4949-cd353d1b9b16",
            "ancestors": [],
            "description": "In Java code recursively queries the graph for all nodes connected to a given node via doors, returning a list of such nodes.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph structure."
              },
              {
                "name": "node",
                "type_name": "GraphNode",
                "description": "Referred to as a node in the graph."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of nodes that are connected to a specific node through doors."
            },
            "name": "get_connected_door_nodes",
            "location": {
              "start": 58,
              "insert": 60,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 10,
            "docLength": null
          },
          {
            "id": "9a2a2e72-8415-229d-6c4a-657476ccda61",
            "ancestors": [],
            "description": "Navigates through a graph by starting from a given room and visiting all other rooms reachable through doors. It keeps track of visited rooms using a list and prints information about each room it visits.",
            "params": [
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to represent a graph with nodes and edges."
              },
              {
                "name": "current_room",
                "type_name": "dict",
                "description": "Represents the current room to be traversed in the graph."
              },
              {
                "name": "visited",
                "type_name": "list",
                "description": "Used to keep track of the rooms that have been visited during the traversal process, initialized to an empty list if None."
              }
            ],
            "returns": {
              "type_name": "list",
              "description": "A collection of strings representing the rooms that have been visited."
            },
            "name": "traverse_graph",
            "location": {
              "start": 74,
              "insert": 75,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "genericworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/genericworker.py",
    "content": {
      "structured": {
        "description": "A worker class that inherits from QtWidgets.QWidget and implements a timer-based mechanism for killing itself after a specified period. It also provides a signal kill to allow for handling of the termination from outside the worker. The code uses PySide2, Ice, and the RoboCompCommonBehavior module.",
        "items": [
          {
            "id": "8a50128c-009f-a1ac-2c45-674f0e62438e",
            "ancestors": [],
            "description": "Manages a timer and a signal to stop its own execution. It has methods to change the timer period and to emit the signal to stop itself.",
            "attributes": [
              {
                "name": "kill",
                "type_name": "QtCoreQObjectSlot",
                "description": "Used to emit a signal that can be caught by any connected slots to stop the worker's execution."
              },
              {
                "name": "ui",
                "type_name": "Ui_guiDlg",
                "description": "Used to setup the user interface of the class."
              },
              {
                "name": "mutex",
                "type_name": "QMutex",
                "description": "Used to protect the worker's state from concurrent access."
              },
              {
                "name": "Period",
                "type_name": "int",
                "description": "Used to set the time interval for the timer signal emitted by the `setPeriod()` method, which changes its value on each call."
              },
              {
                "name": "timer",
                "type_name": "QtCoreQTimer",
                "description": "Used to start a timer that emits the `kill` signal after a specified period."
              }
            ],
            "name": "GenericWorker",
            "location": {
              "start": 43,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 26,
            "docLength": null
          },
          {
            "id": "dc756aa5-ebc6-5490-d649-854bb2ac26a4",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Initializes an object of the `GenericWorker` class, setting up a UI widget, creating a mutex for synchronization, and defining a timer with a period of 500 milliseconds.",
            "params": [
              {
                "name": "mprx",
                "type_name": "Ui_guiDlg",
                "description": "Used as the parent widget for the GenericWorker object's UI."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 47,
              "insert": 48,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "17fccd3d-bcc7-a9a3-5f45-73125f7d1f78",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Emits the `kill` signal, indicating that the object should be terminated.",
            "params": [],
            "returns": null,
            "name": "killYourSelf",
            "location": {
              "start": 60,
              "insert": 62,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "a2ebb705-7932-fb9b-3e45-f965c61ebf4d",
            "ancestors": [
              "8a50128c-009f-a1ac-2c45-674f0e62438e"
            ],
            "description": "Sets the period of a timer and updates the internal variable `Period`.",
            "params": [
              {
                "name": "p",
                "type_name": "int",
                "description": "Used to set the new period for the timer."
              }
            ],
            "returns": null,
            "name": "setPeriod",
            "location": {
              "start": 67,
              "insert": 69,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "agents/long_term_spatial_memory_agent/src/specificworker.py",
    "content": {
      "structured": {
        "description": "an AI agent that navigates through a 3D space and interacts with objects in that space using a deep reinforcement learning algorithm. The agent maintains a graph representation of its environment and uses this graph to plan its actions and learn from its experiences. The code includes various methods for updating the agent's internal state, such as updating its node attributions, updating its node, and deleting nodes or edges from its graph. Additionally, it includes methods for generating room pictures, inserting current edges, and checking for startup. Overall, this code provides a comprehensive framework for an AI agent to navigate and interact with its environment using deep reinforcement learning.",
        "items": [
          {
            "id": "14d16d1c-f321-80b9-164e-7904534324da",
            "ancestors": [],
            "description": "Manages a graph representing an agent's environment and performs various tasks related to navigation, such as updating node attributes, inserting edges, and deleting nodes or edges. It also handles startup checks and provides methods for checking the current room, element level, and room number, as well as generating a picture of the room and inserting a current edge.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "str",
                "description": "20 seconds long, indicating how often the worker will execute its function."
              },
              {
                "name": "agent_id",
                "type_name": "int",
                "description": "Used to store the ID of the agent that this worker represents."
              },
              {
                "name": "g",
                "type_name": "Graph",
                "description": "Used to represent the robot's internal graph, which stores information about the \nrobot's environment, such as nodes (rooms), edges, and their attributes. The graph is \nused to model the robot's movement and interactions with its environment."
              },
              {
                "name": "update_node",
                "type_name": "int",
                "description": "Used to update the state of a specific node in the graph based on its type (either \"active\" or \"crossed\"). It takes an argument `type`, which can be either \"active\" or \"crossed\", and updates the corresponding attribute of the node with the given ID."
              },
              {
                "name": "update_edge",
                "type_name": "Edge",
                "description": "Used to set a new current edge between two nodes when there is no existing current edge and the room node exists."
              },
              {
                "name": "startup_check",
                "type_name": "QTimersingleShot",
                "description": "Set to call the `QApplication.instance().quit` function after 200 milliseconds of starting up the worker, indicating that the worker has finished its initialization and is ready to process tasks."
              },
              {
                "name": "rt_api",
                "type_name": "str",
                "description": "Used to store the API for the robot's RT (Real-Time) communication. It is used to send commands and receive updates from the robot in real-time."
              },
              {
                "name": "inner_api",
                "type_name": "internal",
                "description": "Used to access the agent's inner API for retrieving information such as room coordinates, door connections, and robot position."
              },
              {
                "name": "robot_name",
                "type_name": "str",
                "description": "Used to store the name of the robot. It is set during the construction of the worker object and can be accessed later for various purposes such as communication with other agents or saving in a graph."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "Used to represent the ID of the robot that is currently in the room."
              },
              {
                "name": "last_robot_pose",
                "type_name": "Pose",
                "description": "Updated each time the worker moves, storing the last known pose of the robot before any movement occurred."
              },
              {
                "name": "robot_exit_pose",
                "type_name": "Pose",
                "description": "Used to represent the pose of a robot when it exits a room. It is used in the `insert_current_edge` method to determine when a new edge should be inserted as current."
              },
              {
                "name": "state",
                "type_name": "str",
                "description": "Used to store the current state of the agent, which can be either \"idle\", \"crossed\", or \"completed\"."
              },
              {
                "name": "affordance_node_active_id",
                "type_name": "int",
                "description": "Used to store the ID of the affordance node that is currently active or being processed by the worker."
              },
              {
                "name": "exit_door_id",
                "type_name": "int",
                "description": "12 by default, indicating the door ID of the room that the worker exits from when it finishes its task."
              },
              {
                "name": "room_exit_door_id",
                "type_name": "int",
                "description": "4 by default, representing the ID of the door that marks the exit of a room in the environment."
              },
              {
                "name": "enter_room_node_id",
                "type_name": "int",
                "description": "Used to store the ID of the room node that the worker is currently inside."
              },
              {
                "name": "graph",
                "type_name": "Graph",
                "description": "Used to store the robot's internal graph, which represents the state of the environment and the robot's actions."
              },
              {
                "name": "vertex_size",
                "type_name": "int",
                "description": "16 by default, indicating the size of each vertex in pixels. It can be used to adjust the visual representation of the graph in the worker's internal API."
              },
              {
                "name": "not_required_attrs",
                "type_name": "list",
                "description": "Used to specify a list of attributes that are not required for the worker's functionality. These are attributes that can be omitted without affecting the worker's behavior or performance."
              },
              {
                "name": "long_term_graph",
                "type_name": "Graph",
                "description": "Used to store the internal graph of the agent over time, allowing the worker to keep track of the agent's long-term memory and reasoning."
              },
              {
                "name": "global_map",
                "type_name": "dict",
                "description": "Used to store the global map image that the worker uses for navigation. It is initialized with a blank dictionary when the worker starts and can be modified by calling methods such as `insert_current_edge` and `update_node`."
              },
              {
                "name": "insert_current_edge",
                "type_name": "Edge",
                "description": "Used to insert a new edge in the graph with the current room as the origin and the destination room, signaling that the robot has entered the room."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a callback function to be called after a certain time (in milliseconds) has passed."
              },
              {
                "name": "compute",
                "type_name": "str",
                "description": "Used to hold the worker's computation result"
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 49,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 537,
            "docLength": null
          },
          {
            "id": "f5c0bd08-589a-4b8b-a14e-7fd68022b8be",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Initializes an object of the `SpecificWorker` class, setting properties and connecting signals for updating node and edge positions in a graph representing a spatial memory environment.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "igraphGraph",
                "description": "Passed to the superclass's constructor. It represents the graph that the SpecificWorker class will work on."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to determine whether to run a check during startup, which involves checking for validity of graph edges."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 50,
              "insert": 51,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 46,
            "docLength": null
          },
          {
            "id": "f9acbd22-c01b-23b7-6f4f-b4fa40fec045",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Sets the parameters for a worker instance, specifically removing a self-edge from a room and updating various attributes related to doors.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Used to set various attributes of the room and its doors."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True."
            },
            "name": "setParams",
            "location": {
              "start": 116,
              "insert": 117,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "9f58c232-e34f-ca91-4848-7ab916c1e754",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Determines the current state of a worker and calls the appropriate method to update its state based on the current state machine.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 130,
              "insert": 149,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "8089bfc6-1aec-89b3-ff4c-2221ef94ad24",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Determines the robot's affordance in the current room and calculates the pose of the door to reach the center of a new room. It also associates doors, updates node attributes, and changes the state of the worker.",
            "params": [],
            "returns": null,
            "name": "idle",
            "location": {
              "start": 168,
              "insert": 170,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 75,
            "docLength": null
          },
          {
            "id": "59952246-8d88-ffad-ea44-e45c226538f7",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Determines the exit door ID for a specific room based on an active affordance node and updates the state of the worker accordingly.",
            "params": [],
            "returns": null,
            "name": "crossed",
            "location": {
              "start": 268,
              "insert": 270,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "3d97375c-3e55-c7b9-1d40-4fee711096bc",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Determines and saves the ID of the first non-exiting room node in the graph, and sets the state to \"initializing doors\".",
            "params": [],
            "returns": null,
            "name": "initializing_room",
            "location": {
              "start": 288,
              "insert": 291,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "81c984ff-ff5e-afab-5d46-5440953dbe7f",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Given to an instance of the SpecificWorker class, identifies the room that the robot is currently located in and returns relevant information about it.",
            "params": [],
            "returns": null,
            "name": "known_room",
            "location": {
              "start": 302,
              "insert": 304,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 73,
            "docLength": null
          },
          {
            "id": "1a1e3b3c-b20c-c79f-5c42-f0dbaa2e4333",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Identifies and updates the connections between doors in a graph, based on their types and attributes. It associates doors with each other and updates node attributes to reflect their relationships.",
            "params": [],
            "returns": null,
            "name": "initializing_doors",
            "location": {
              "start": 396,
              "insert": 398,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "517f46f2-3ff6-5e9f-4243-ba8f95693b69",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Adds an edge between two nodes in a graph, linking them as doors to each other's rooms. It also assigns the names of the other door and connected room to each node.",
            "params": [
              {
                "name": "door_1",
                "type_name": "str",
                "description": "2-element list representing a door node name and its associated room name in an igraph graph."
              },
              {
                "name": "door_2",
                "type_name": "IgraphVertex",
                "description": "Represented as a list containing the room name and the adjacent room name."
              }
            ],
            "returns": null,
            "name": "associate_doors",
            "location": {
              "start": 435,
              "insert": 437,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "8b48d263-c9fe-bc96-5749-1000b78b7843",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Stores the graph data in a pickle file \"graph.pkl\".",
            "params": [],
            "returns": null,
            "name": "store_graph",
            "location": {
              "start": 454,
              "insert": 455,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "5e9c08ef-5fbc-0d93-b441-f4b177f7bd6a",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Removes nodes from the graph that have no incoming or outgoing edges, and shadows nodes with specific room numbers.",
            "params": [],
            "returns": null,
            "name": "removing",
            "location": {
              "start": 468,
              "insert": 470,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "1e568e41-1cae-638e-c944-d3abc3ff3edd",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Traverses the graph represented by the `Igraph` object `g`. It starts at a specified node (`node_id`) and explores its RT children, then recursively traverses the graph to the destination of each RT child.",
            "params": [
              {
                "name": "node_id",
                "type_name": "int",
                "description": "Represented by the `g.get_node()` method, which retrieves a node from the graph based on its ID."
              }
            ],
            "returns": null,
            "name": "traverse_graph",
            "location": {
              "start": 494,
              "insert": 496,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "6bb1abc3-e4f5-a8be-8d4f-df44de6d1f92",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Traverses the graph and inserts DSR vertices and edges based on certain conditions.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphVertex",
                "description": "An instance of vertex in a graph representing a node with its attributes such as index, name, room ID, and level."
              }
            ],
            "returns": null,
            "name": "traverse_igraph",
            "location": {
              "start": 504,
              "insert": 505,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "6d280869-b88e-6d8b-994f-d1e0dd1cc3de",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Adds a new vertex to an igraph graph based on input node data and updates the graph's vertices with the corresponding attributes.",
            "params": [
              {
                "name": "node",
                "type_name": "igraphNode",
                "description": "Used to represent a vertex to be added to an igraph graph. It contains information such as the vertex name, ID, and type."
              }
            ],
            "returns": null,
            "name": "insert_igraph_vertex",
            "location": {
              "start": 517,
              "insert": 518,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "8af24c89-c672-9d98-324b-58e820167ab8",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Inserts a new node into a graph, setting its parent node and attributes based on the provided node object.",
            "params": [
              {
                "name": "parent_name",
                "type_name": "str",
                "description": "Used to specify the name of the parent node that will hold the newly created node as a child."
              },
              {
                "name": "node",
                "type_name": "Python",
                "description": "Passed as an instance of class `Node`."
              }
            ],
            "returns": null,
            "name": "insert_dsr_vertex",
            "location": {
              "start": 552,
              "insert": 554,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "74eb41e5-e103-40bc-1e4f-dbf64f47284b",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Adds an edge to an igraph object, providing the origin and destination nodes and their respective attributes (translation and rotation) for the edge.",
            "params": [
              {
                "name": "edge",
                "type_name": "igraphEdge",
                "description": "An object containing information about an edge to be added to an igraph graph, including its origin and destination nodes, as well as rotation and translation attributes."
              }
            ],
            "returns": null,
            "name": "insert_igraph_edge",
            "location": {
              "start": 566,
              "insert": 569,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "067fc9ce-6d2c-50b3-9642-530b595fd5e7",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Modifies an existing edge in a graph by adding new attributes \"rt_translation\" and \"rt_rotation_euler_xyz\". It then inserts or assigns the modified edge into the graph.",
            "params": [
              {
                "name": "org",
                "type_name": "Agent",
                "description": "Represented as a Node object in the graph, containing information such as id, name, and rotation."
              },
              {
                "name": "dest",
                "type_name": "Agent",
                "description": "Used to represent the target node or edge of the graph, which will be updated with the new RT value and rotation information."
              }
            ],
            "returns": null,
            "name": "insert_dsr_edge",
            "location": {
              "start": 578,
              "insert": 581,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "00c1cc7c-1774-8f91-744a-08d2a9dcebe7",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Clears the axis, layouts the graph using the Kamada-Kawai algorithm, and plots arrows for edges. It also adds node labels and sets xy limits.",
            "params": [],
            "returns": null,
            "name": "draw_graph",
            "location": {
              "start": 608,
              "insert": 609,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "0c45547a-d643-a3a4-6841-fb69f9b9d7ac",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Retrieves the room ID associated with a given node ID through attribute retrieval and returns it if successful, or -1 otherwise.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Used to identify the node whose room number needs to be retrieved."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "The room ID of a given node's element or -1 if an error occurs when trying to retrieve the room ID."
            },
            "name": "check_element_room_number",
            "location": {
              "start": 633,
              "insert": 634,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "8b8d5f6b-ab49-e8ac-264d-78917524c774",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Within SpecificWorker, a subclass of GenericWorker, retrieves the element level attribute from a given node and returns its value if found, or -1 otherwise. It also checks the robot position and adjusts door connections in the agent's internal graph if necessary.",
            "params": [
              {
                "name": "node_id",
                "type_name": "str",
                "description": "Used as an identifier for a specific node in the graph."
              }
            ],
            "returns": {
              "type_name": "integerints",
              "description": "The element level of the node with the given `node_id`."
            },
            "name": "check_element_level",
            "location": {
              "start": 642,
              "insert": 643,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "9cc9cde0-a537-cbb5-f946-cafc99280a81",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Within the `SpecificWorker` class retrieves and processes data related to a specific room, including its ID, edges with a certain type, and translation attribute. It also draws the room polygon and doors.",
            "params": [
              {
                "name": "room_node_id",
                "type_name": "str",
                "description": "Used to identify the node representing the room for which a picture needs to be generated."
              }
            ],
            "returns": null,
            "name": "generate_room_picture",
            "location": {
              "start": 685,
              "insert": 687,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "a1d95887-ac1d-d1ae-5e4c-e5a373c17054",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Inserts or assigns an edge in the graph with the given `room_id` as its tail and the current agent's ID as its head.",
            "params": [
              {
                "name": "room_id",
                "type_name": "str",
                "description": "Passed as an argument to the function, representing the ID of the current room that the agent is located in."
              }
            ],
            "returns": null,
            "name": "insert_current_edge",
            "location": {
              "start": 720,
              "insert": 722,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "23efec40-805a-b496-934d-2914ec7c005d",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Updates the state of an affordance node based on its ID and type. If the active affordance node's state is \"completed\" and its active status is false, it transitions to the \"crossed\" state.",
            "params": [
              {
                "name": "id",
                "type_name": "int",
                "description": "Passed as an argument representing the unique identifier of the node being updated."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Passed as an argument to the function, indicating the type of node being updated."
              }
            ],
            "returns": null,
            "name": "update_node",
            "location": {
              "start": 734,
              "insert": 735,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d05c52b1-a4de-66a0-d446-982a037f8152",
            "ancestors": [
              "14d16d1c-f321-80b9-164e-7904534324da"
            ],
            "description": "Determines if there is a current edge connecting two nodes in a graph based on specific conditions and updates the current edge if necessary.",
            "params": [
              {
                "name": "fr",
                "type_name": "int",
                "description": "A reference to a specific node in the graph."
              },
              {
                "name": "to",
                "type_name": "int",
                "description": "Referred to as the ID of a node in the graph."
              },
              {
                "name": "type",
                "type_name": "str",
                "description": "Set to \"RT\". It represents the type of edge being updated."
              }
            ],
            "returns": null,
            "name": "update_edge",
            "location": {
              "start": 749,
              "insert": 753,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  }
]